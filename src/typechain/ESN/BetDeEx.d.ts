/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers';
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

interface BetDeExInterface extends ethers.utils.Interface {
  functions: {
    'clonedContracts(uint256)': FunctionFragment;
    'createBet(string,uint8,uint8,uint256,uint256,bool,uint256)': FunctionFragment;
    'dayswappers()': FunctionFragment;
    'emitEndBetEvent(address,uint8,uint256)': FunctionFragment;
    'emitNewBettingEvent(address,uint8,uint256)': FunctionFragment;
    'getNumberOfBets()': FunctionFragment;
    'implementation()': FunctionFragment;
    'isBetValid(address)': FunctionFragment;
    'kycDapp()': FunctionFragment;
    'nrtManager()': FunctionFragment;
    'owner()': FunctionFragment;
    'payRewards(address,uint256,uint256)': FunctionFragment;
    'prepaidEs()': FunctionFragment;
    'randomnessManager()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'resolveAddress(bytes32)': FunctionFragment;
    'resolveAddressStrict(bytes32)': FunctionFragment;
    'resolveUsername(address)': FunctionFragment;
    'resolveUsernameStrict(address)': FunctionFragment;
    'setKycDapp(address)': FunctionFragment;
    'storageFactory(address)': FunctionFragment;
    'timeallyClub()': FunctionFragment;
    'timeallyManager()': FunctionFragment;
    'timeallyPromotionalBucket()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'validatorManager()': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'clonedContracts', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'createBet',
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'dayswappers', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'emitEndBetEvent',
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'emitNewBettingEvent',
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'getNumberOfBets', values?: undefined): string;
  encodeFunctionData(functionFragment: 'implementation', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isBetValid', values: [string]): string;
  encodeFunctionData(functionFragment: 'kycDapp', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nrtManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'payRewards',
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'prepaidEs', values?: undefined): string;
  encodeFunctionData(functionFragment: 'randomnessManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'resolveAddress', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'resolveAddressStrict', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'resolveUsername', values: [string]): string;
  encodeFunctionData(functionFragment: 'resolveUsernameStrict', values: [string]): string;
  encodeFunctionData(functionFragment: 'setKycDapp', values: [string]): string;
  encodeFunctionData(functionFragment: 'storageFactory', values: [string]): string;
  encodeFunctionData(functionFragment: 'timeallyClub', values?: undefined): string;
  encodeFunctionData(functionFragment: 'timeallyManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'timeallyPromotionalBucket', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'validatorManager', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'clonedContracts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createBet', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'dayswappers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emitEndBetEvent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emitNewBettingEvent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNumberOfBets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'implementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isBetValid', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'kycDapp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nrtManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'payRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'prepaidEs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'randomnessManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resolveAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resolveAddressStrict', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resolveUsername', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resolveUsernameStrict', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setKycDapp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'storageFactory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'timeallyClub', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'timeallyManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'timeallyPromotionalBucket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'validatorManager', data: BytesLike): Result;

  events: {
    'EndBetContract(address,address,uint8,uint256)': EventFragment;
    'NewBetEvent(address,address,uint8,uint8,string)': EventFragment;
    'NewBetting(address,address,uint8,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'EndBetContract'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewBetEvent'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewBetting'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
}

export class BetDeEx extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BetDeExInterface;

  functions: {
    clonedContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'clonedContracts(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    createBet(
      _description: string,
      _category: BigNumberish,
      _subCategory: BigNumberish,
      _minimumBetInExaEs: BigNumberish,
      _prizePercentPerThousand: BigNumberish,
      _isDrawPossible: boolean,
      _pauseTimestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'createBet(string,uint8,uint8,uint256,uint256,bool,uint256)'(
      _description: string,
      _category: BigNumberish,
      _subCategory: BigNumberish,
      _minimumBetInExaEs: BigNumberish,
      _prizePercentPerThousand: BigNumberish,
      _isDrawPossible: boolean,
      _pauseTimestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    dayswappers(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'dayswappers()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * this is an internal functionality that is only for bet contracts to emit event when a bet is ended so that front end can get the information by subscribing to  contract
     */
    emitEndBetEvent(
      _ender: string,
      _result: BigNumberish,
      _gasFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * this is an internal functionality that is only for bet contracts to emit event when a bet is ended so that front end can get the information by subscribing to  contract
     */
    'emitEndBetEvent(address,uint8,uint256)'(
      _ender: string,
      _result: BigNumberish,
      _gasFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * this is an internal functionality that is only for bet contracts to emit a event when a new bet is placed so that front end can get the information by subscribing to  contract
     */
    emitNewBettingEvent(
      _bettorAddress: string,
      _choice: BigNumberish,
      _betTokensInExaEs: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * this is an internal functionality that is only for bet contracts to emit a event when a new bet is placed so that front end can get the information by subscribing to  contract
     */
    'emitNewBettingEvent(address,uint8,uint256)'(
      _bettorAddress: string,
      _choice: BigNumberish,
      _betTokensInExaEs: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * this function is used for getting total number of bets
     */
    getNumberOfBets(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * this function is used for getting total number of bets
     */
    'getNumberOfBets()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    implementation(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'implementation()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    isBetValid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    'isBetValid(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    kycDapp(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'kycDapp()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    nrtManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'nrtManager()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the address of the current owner.
     */
    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the address of the current owner.
     */
    'owner()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    payRewards(
      _bettor: string,
      _treeAmount: BigNumberish,
      _introducerAmount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    'payRewards(address,uint256,uint256)'(
      _bettor: string,
      _treeAmount: BigNumberish,
      _introducerAmount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    prepaidEs(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'prepaidEs()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    randomnessManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'randomnessManager()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    'renounceOwnership()'(
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    resolveAddress(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'resolveAddress(bytes32)'(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    resolveAddressStrict(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'resolveAddressStrict(bytes32)'(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    resolveUsername(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'resolveUsername(address)'(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    resolveUsernameStrict(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'resolveUsernameStrict(address)'(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setKycDapp(_kycDapp: string, overrides?: Overrides): Promise<ContractTransaction>;

    'setKycDapp(address)'(_kycDapp: string, overrides?: Overrides): Promise<ContractTransaction>;

    storageFactory(_implementation: string, overrides?: Overrides): Promise<ContractTransaction>;

    'storageFactory(address)'(
      _implementation: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    timeallyClub(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'timeallyClub()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    timeallyManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'timeallyManager()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    timeallyPromotionalBucket(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'timeallyPromotionalBucket()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(newOwner: string, overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    validatorManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'validatorManager()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  clonedContracts(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  'clonedContracts(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  createBet(
    _description: string,
    _category: BigNumberish,
    _subCategory: BigNumberish,
    _minimumBetInExaEs: BigNumberish,
    _prizePercentPerThousand: BigNumberish,
    _isDrawPossible: boolean,
    _pauseTimestamp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'createBet(string,uint8,uint8,uint256,uint256,bool,uint256)'(
    _description: string,
    _category: BigNumberish,
    _subCategory: BigNumberish,
    _minimumBetInExaEs: BigNumberish,
    _prizePercentPerThousand: BigNumberish,
    _isDrawPossible: boolean,
    _pauseTimestamp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  dayswappers(overrides?: CallOverrides): Promise<string>;

  'dayswappers()'(overrides?: CallOverrides): Promise<string>;

  /**
   * this is an internal functionality that is only for bet contracts to emit event when a bet is ended so that front end can get the information by subscribing to  contract
   */
  emitEndBetEvent(
    _ender: string,
    _result: BigNumberish,
    _gasFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * this is an internal functionality that is only for bet contracts to emit event when a bet is ended so that front end can get the information by subscribing to  contract
   */
  'emitEndBetEvent(address,uint8,uint256)'(
    _ender: string,
    _result: BigNumberish,
    _gasFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * this is an internal functionality that is only for bet contracts to emit a event when a new bet is placed so that front end can get the information by subscribing to  contract
   */
  emitNewBettingEvent(
    _bettorAddress: string,
    _choice: BigNumberish,
    _betTokensInExaEs: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * this is an internal functionality that is only for bet contracts to emit a event when a new bet is placed so that front end can get the information by subscribing to  contract
   */
  'emitNewBettingEvent(address,uint8,uint256)'(
    _bettorAddress: string,
    _choice: BigNumberish,
    _betTokensInExaEs: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * this function is used for getting total number of bets
   */
  getNumberOfBets(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * this function is used for getting total number of bets
   */
  'getNumberOfBets()'(overrides?: CallOverrides): Promise<BigNumber>;

  implementation(overrides?: CallOverrides): Promise<string>;

  'implementation()'(overrides?: CallOverrides): Promise<string>;

  isBetValid(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  'isBetValid(address)'(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  kycDapp(overrides?: CallOverrides): Promise<string>;

  'kycDapp()'(overrides?: CallOverrides): Promise<string>;

  nrtManager(overrides?: CallOverrides): Promise<string>;

  'nrtManager()'(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  'owner()'(overrides?: CallOverrides): Promise<string>;

  payRewards(
    _bettor: string,
    _treeAmount: BigNumberish,
    _introducerAmount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  'payRewards(address,uint256,uint256)'(
    _bettor: string,
    _treeAmount: BigNumberish,
    _introducerAmount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  prepaidEs(overrides?: CallOverrides): Promise<string>;

  'prepaidEs()'(overrides?: CallOverrides): Promise<string>;

  randomnessManager(overrides?: CallOverrides): Promise<string>;

  'randomnessManager()'(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(overrides?: CallOverrides): Promise<void>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  'renounceOwnership()'(overrides?: CallOverrides): Promise<void>;

  resolveAddress(_username: BytesLike, overrides?: CallOverrides): Promise<string>;

  'resolveAddress(bytes32)'(_username: BytesLike, overrides?: CallOverrides): Promise<string>;

  resolveAddressStrict(_username: BytesLike, overrides?: CallOverrides): Promise<string>;

  'resolveAddressStrict(bytes32)'(_username: BytesLike, overrides?: CallOverrides): Promise<string>;

  resolveUsername(_wallet: string, overrides?: CallOverrides): Promise<string>;

  'resolveUsername(address)'(_wallet: string, overrides?: CallOverrides): Promise<string>;

  resolveUsernameStrict(_wallet: string, overrides?: CallOverrides): Promise<string>;

  'resolveUsernameStrict(address)'(_wallet: string, overrides?: CallOverrides): Promise<string>;

  setKycDapp(_kycDapp: string, overrides?: Overrides): Promise<ContractTransaction>;

  'setKycDapp(address)'(_kycDapp: string, overrides?: Overrides): Promise<ContractTransaction>;

  storageFactory(_implementation: string, overrides?: Overrides): Promise<ContractTransaction>;

  'storageFactory(address)'(
    _implementation: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  timeallyClub(overrides?: CallOverrides): Promise<string>;

  'timeallyClub()'(overrides?: CallOverrides): Promise<string>;

  timeallyManager(overrides?: CallOverrides): Promise<string>;

  'timeallyManager()'(overrides?: CallOverrides): Promise<string>;

  timeallyPromotionalBucket(overrides?: CallOverrides): Promise<string>;

  'timeallyPromotionalBucket()'(overrides?: CallOverrides): Promise<string>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(newOwner: string, overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  'transferOwnership(address)'(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  validatorManager(overrides?: CallOverrides): Promise<string>;

  'validatorManager()'(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    clonedContracts(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    'clonedContracts(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    createBet(
      _description: string,
      _category: BigNumberish,
      _subCategory: BigNumberish,
      _minimumBetInExaEs: BigNumberish,
      _prizePercentPerThousand: BigNumberish,
      _isDrawPossible: boolean,
      _pauseTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'createBet(string,uint8,uint8,uint256,uint256,bool,uint256)'(
      _description: string,
      _category: BigNumberish,
      _subCategory: BigNumberish,
      _minimumBetInExaEs: BigNumberish,
      _prizePercentPerThousand: BigNumberish,
      _isDrawPossible: boolean,
      _pauseTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    dayswappers(overrides?: CallOverrides): Promise<string>;

    'dayswappers()'(overrides?: CallOverrides): Promise<string>;

    /**
     * this is an internal functionality that is only for bet contracts to emit event when a bet is ended so that front end can get the information by subscribing to  contract
     */
    emitEndBetEvent(
      _ender: string,
      _result: BigNumberish,
      _gasFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * this is an internal functionality that is only for bet contracts to emit event when a bet is ended so that front end can get the information by subscribing to  contract
     */
    'emitEndBetEvent(address,uint8,uint256)'(
      _ender: string,
      _result: BigNumberish,
      _gasFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * this is an internal functionality that is only for bet contracts to emit a event when a new bet is placed so that front end can get the information by subscribing to  contract
     */
    emitNewBettingEvent(
      _bettorAddress: string,
      _choice: BigNumberish,
      _betTokensInExaEs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * this is an internal functionality that is only for bet contracts to emit a event when a new bet is placed so that front end can get the information by subscribing to  contract
     */
    'emitNewBettingEvent(address,uint8,uint256)'(
      _bettorAddress: string,
      _choice: BigNumberish,
      _betTokensInExaEs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * this function is used for getting total number of bets
     */
    getNumberOfBets(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * this function is used for getting total number of bets
     */
    'getNumberOfBets()'(overrides?: CallOverrides): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<string>;

    'implementation()'(overrides?: CallOverrides): Promise<string>;

    isBetValid(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    'isBetValid(address)'(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    kycDapp(overrides?: CallOverrides): Promise<string>;

    'kycDapp()'(overrides?: CallOverrides): Promise<string>;

    nrtManager(overrides?: CallOverrides): Promise<string>;

    'nrtManager()'(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    'owner()'(overrides?: CallOverrides): Promise<string>;

    payRewards(
      _bettor: string,
      _treeAmount: BigNumberish,
      _introducerAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'payRewards(address,uint256,uint256)'(
      _bettor: string,
      _treeAmount: BigNumberish,
      _introducerAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    prepaidEs(overrides?: CallOverrides): Promise<string>;

    'prepaidEs()'(overrides?: CallOverrides): Promise<string>;

    randomnessManager(overrides?: CallOverrides): Promise<string>;

    'randomnessManager()'(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>;

    resolveAddress(_username: BytesLike, overrides?: CallOverrides): Promise<string>;

    'resolveAddress(bytes32)'(_username: BytesLike, overrides?: CallOverrides): Promise<string>;

    resolveAddressStrict(_username: BytesLike, overrides?: CallOverrides): Promise<string>;

    'resolveAddressStrict(bytes32)'(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    resolveUsername(_wallet: string, overrides?: CallOverrides): Promise<string>;

    'resolveUsername(address)'(_wallet: string, overrides?: CallOverrides): Promise<string>;

    resolveUsernameStrict(_wallet: string, overrides?: CallOverrides): Promise<string>;

    'resolveUsernameStrict(address)'(_wallet: string, overrides?: CallOverrides): Promise<string>;

    setKycDapp(_kycDapp: string, overrides?: CallOverrides): Promise<void>;

    'setKycDapp(address)'(_kycDapp: string, overrides?: CallOverrides): Promise<void>;

    storageFactory(_implementation: string, overrides?: CallOverrides): Promise<void>;

    'storageFactory(address)'(_implementation: string, overrides?: CallOverrides): Promise<void>;

    timeallyClub(overrides?: CallOverrides): Promise<string>;

    'timeallyClub()'(overrides?: CallOverrides): Promise<string>;

    timeallyManager(overrides?: CallOverrides): Promise<string>;

    'timeallyManager()'(overrides?: CallOverrides): Promise<string>;

    timeallyPromotionalBucket(overrides?: CallOverrides): Promise<string>;

    'timeallyPromotionalBucket()'(overrides?: CallOverrides): Promise<string>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    'transferOwnership(address)'(newOwner: string, overrides?: CallOverrides): Promise<void>;

    validatorManager(overrides?: CallOverrides): Promise<string>;

    'validatorManager()'(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    EndBetContract(
      _ender: string | null,
      _contractAddress: string | null,
      _result: null,
      _platformFee: null
    ): EventFilter;

    NewBetEvent(
      _deployer: string | null,
      _contractAddress: null,
      _category: BigNumberish | null,
      _subCategory: BigNumberish | null,
      _description: null
    ): EventFilter;

    NewBetting(
      _betAddress: string | null,
      _bettorAddress: string | null,
      _choice: BigNumberish | null,
      _betTokensInExaEs: null
    ): EventFilter;

    OwnershipTransferred(previousOwner: string | null, newOwner: string | null): EventFilter;
  };

  estimateGas: {
    clonedContracts(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'clonedContracts(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    createBet(
      _description: string,
      _category: BigNumberish,
      _subCategory: BigNumberish,
      _minimumBetInExaEs: BigNumberish,
      _prizePercentPerThousand: BigNumberish,
      _isDrawPossible: boolean,
      _pauseTimestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'createBet(string,uint8,uint8,uint256,uint256,bool,uint256)'(
      _description: string,
      _category: BigNumberish,
      _subCategory: BigNumberish,
      _minimumBetInExaEs: BigNumberish,
      _prizePercentPerThousand: BigNumberish,
      _isDrawPossible: boolean,
      _pauseTimestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    dayswappers(overrides?: CallOverrides): Promise<BigNumber>;

    'dayswappers()'(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * this is an internal functionality that is only for bet contracts to emit event when a bet is ended so that front end can get the information by subscribing to  contract
     */
    emitEndBetEvent(
      _ender: string,
      _result: BigNumberish,
      _gasFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * this is an internal functionality that is only for bet contracts to emit event when a bet is ended so that front end can get the information by subscribing to  contract
     */
    'emitEndBetEvent(address,uint8,uint256)'(
      _ender: string,
      _result: BigNumberish,
      _gasFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * this is an internal functionality that is only for bet contracts to emit a event when a new bet is placed so that front end can get the information by subscribing to  contract
     */
    emitNewBettingEvent(
      _bettorAddress: string,
      _choice: BigNumberish,
      _betTokensInExaEs: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * this is an internal functionality that is only for bet contracts to emit a event when a new bet is placed so that front end can get the information by subscribing to  contract
     */
    'emitNewBettingEvent(address,uint8,uint256)'(
      _bettorAddress: string,
      _choice: BigNumberish,
      _betTokensInExaEs: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * this function is used for getting total number of bets
     */
    getNumberOfBets(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * this function is used for getting total number of bets
     */
    'getNumberOfBets()'(overrides?: CallOverrides): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<BigNumber>;

    'implementation()'(overrides?: CallOverrides): Promise<BigNumber>;

    isBetValid(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'isBetValid(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    kycDapp(overrides?: CallOverrides): Promise<BigNumber>;

    'kycDapp()'(overrides?: CallOverrides): Promise<BigNumber>;

    nrtManager(overrides?: CallOverrides): Promise<BigNumber>;

    'nrtManager()'(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    'owner()'(overrides?: CallOverrides): Promise<BigNumber>;

    payRewards(
      _bettor: string,
      _treeAmount: BigNumberish,
      _introducerAmount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    'payRewards(address,uint256,uint256)'(
      _bettor: string,
      _treeAmount: BigNumberish,
      _introducerAmount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    prepaidEs(overrides?: CallOverrides): Promise<BigNumber>;

    'prepaidEs()'(overrides?: CallOverrides): Promise<BigNumber>;

    randomnessManager(overrides?: CallOverrides): Promise<BigNumber>;

    'randomnessManager()'(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    'renounceOwnership()'(overrides?: CallOverrides): Promise<BigNumber>;

    resolveAddress(_username: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    'resolveAddress(bytes32)'(_username: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    resolveAddressStrict(_username: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    'resolveAddressStrict(bytes32)'(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolveUsername(_wallet: string, overrides?: CallOverrides): Promise<BigNumber>;

    'resolveUsername(address)'(_wallet: string, overrides?: CallOverrides): Promise<BigNumber>;

    resolveUsernameStrict(_wallet: string, overrides?: CallOverrides): Promise<BigNumber>;

    'resolveUsernameStrict(address)'(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setKycDapp(_kycDapp: string, overrides?: Overrides): Promise<BigNumber>;

    'setKycDapp(address)'(_kycDapp: string, overrides?: Overrides): Promise<BigNumber>;

    storageFactory(_implementation: string, overrides?: Overrides): Promise<BigNumber>;

    'storageFactory(address)'(_implementation: string, overrides?: Overrides): Promise<BigNumber>;

    timeallyClub(overrides?: CallOverrides): Promise<BigNumber>;

    'timeallyClub()'(overrides?: CallOverrides): Promise<BigNumber>;

    timeallyManager(overrides?: CallOverrides): Promise<BigNumber>;

    'timeallyManager()'(overrides?: CallOverrides): Promise<BigNumber>;

    timeallyPromotionalBucket(overrides?: CallOverrides): Promise<BigNumber>;

    'timeallyPromotionalBucket()'(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(newOwner: string, overrides?: Overrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    'transferOwnership(address)'(newOwner: string, overrides?: Overrides): Promise<BigNumber>;

    validatorManager(overrides?: CallOverrides): Promise<BigNumber>;

    'validatorManager()'(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    clonedContracts(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'clonedContracts(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createBet(
      _description: string,
      _category: BigNumberish,
      _subCategory: BigNumberish,
      _minimumBetInExaEs: BigNumberish,
      _prizePercentPerThousand: BigNumberish,
      _isDrawPossible: boolean,
      _pauseTimestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'createBet(string,uint8,uint8,uint256,uint256,bool,uint256)'(
      _description: string,
      _category: BigNumberish,
      _subCategory: BigNumberish,
      _minimumBetInExaEs: BigNumberish,
      _prizePercentPerThousand: BigNumberish,
      _isDrawPossible: boolean,
      _pauseTimestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    dayswappers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'dayswappers()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * this is an internal functionality that is only for bet contracts to emit event when a bet is ended so that front end can get the information by subscribing to  contract
     */
    emitEndBetEvent(
      _ender: string,
      _result: BigNumberish,
      _gasFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * this is an internal functionality that is only for bet contracts to emit event when a bet is ended so that front end can get the information by subscribing to  contract
     */
    'emitEndBetEvent(address,uint8,uint256)'(
      _ender: string,
      _result: BigNumberish,
      _gasFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * this is an internal functionality that is only for bet contracts to emit a event when a new bet is placed so that front end can get the information by subscribing to  contract
     */
    emitNewBettingEvent(
      _bettorAddress: string,
      _choice: BigNumberish,
      _betTokensInExaEs: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * this is an internal functionality that is only for bet contracts to emit a event when a new bet is placed so that front end can get the information by subscribing to  contract
     */
    'emitNewBettingEvent(address,uint8,uint256)'(
      _bettorAddress: string,
      _choice: BigNumberish,
      _betTokensInExaEs: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * this function is used for getting total number of bets
     */
    getNumberOfBets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * this function is used for getting total number of bets
     */
    'getNumberOfBets()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'implementation()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isBetValid(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'isBetValid(address)'(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kycDapp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'kycDapp()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nrtManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'nrtManager()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payRewards(
      _bettor: string,
      _treeAmount: BigNumberish,
      _introducerAmount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    'payRewards(address,uint256,uint256)'(
      _bettor: string,
      _treeAmount: BigNumberish,
      _introducerAmount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    prepaidEs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'prepaidEs()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    randomnessManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'randomnessManager()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    'renounceOwnership()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    resolveAddress(_username: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'resolveAddress(bytes32)'(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolveAddressStrict(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'resolveAddressStrict(bytes32)'(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolveUsername(_wallet: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'resolveUsername(address)'(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolveUsernameStrict(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'resolveUsernameStrict(address)'(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setKycDapp(_kycDapp: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    'setKycDapp(address)'(_kycDapp: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    storageFactory(_implementation: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    'storageFactory(address)'(
      _implementation: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    timeallyClub(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'timeallyClub()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeallyManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'timeallyManager()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeallyPromotionalBucket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'timeallyPromotionalBucket()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(newOwner: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    validatorManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'validatorManager()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
