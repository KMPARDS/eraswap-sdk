/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers';
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

interface BuildSurveyInterface extends ethers.utils.Interface {
  functions: {
    'accessUser(bytes32,address)': FunctionFragment;
    'addSurvey(string,uint256,bool)': FunctionFragment;
    'addUsers(bytes32,address[])': FunctionFragment;
    'dayswappers()': FunctionFragment;
    'kycDapp()': FunctionFragment;
    'nrtManager()': FunctionFragment;
    'owner()': FunctionFragment;
    'prepaidEs()': FunctionFragment;
    'randomnessManager()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'resolveAddress(bytes32)': FunctionFragment;
    'resolveAddressStrict(bytes32)': FunctionFragment;
    'resolveUsername(address)': FunctionFragment;
    'resolveUsernameStrict(address)': FunctionFragment;
    'sendSurvey(bytes32,uint16[])': FunctionFragment;
    'setKycDapp(address)': FunctionFragment;
    'surveys(bytes32)': FunctionFragment;
    'timeallyClub()': FunctionFragment;
    'timeallyManager()': FunctionFragment;
    'timeallyPromotionalBucket()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'validatorManager()': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'accessUser', values: [BytesLike, string]): string;
  encodeFunctionData(
    functionFragment: 'addSurvey',
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: 'addUsers', values: [BytesLike, string[]]): string;
  encodeFunctionData(functionFragment: 'dayswappers', values?: undefined): string;
  encodeFunctionData(functionFragment: 'kycDapp', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nrtManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'prepaidEs', values?: undefined): string;
  encodeFunctionData(functionFragment: 'randomnessManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'resolveAddress', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'resolveAddressStrict', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'resolveUsername', values: [string]): string;
  encodeFunctionData(functionFragment: 'resolveUsernameStrict', values: [string]): string;
  encodeFunctionData(functionFragment: 'sendSurvey', values: [BytesLike, BigNumberish[]]): string;
  encodeFunctionData(functionFragment: 'setKycDapp', values: [string]): string;
  encodeFunctionData(functionFragment: 'surveys', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'timeallyClub', values?: undefined): string;
  encodeFunctionData(functionFragment: 'timeallyManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'timeallyPromotionalBucket', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'validatorManager', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'accessUser', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addSurvey', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addUsers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'dayswappers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'kycDapp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nrtManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'prepaidEs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'randomnessManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resolveAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resolveAddressStrict', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resolveUsername', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resolveUsernameStrict', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sendSurvey', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setKycDapp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'surveys', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'timeallyClub', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'timeallyManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'timeallyPromotionalBucket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'validatorManager', data: BytesLike): Result;

  events: {
    'Auth1(address,bytes32)': EventFragment;
    'NewSurvey(address,bytes32)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'SentSurvey(bytes32,uint16[])': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Auth1'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewSurvey'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SentSurvey'): EventFragment;
}

export class BuildSurvey extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BuildSurveyInterface;

  functions: {
    accessUser(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    'accessUser(bytes32,address)'(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    addSurvey(
      _title: string,
      _time: BigNumberish,
      _ispublic: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    'addSurvey(string,uint256,bool)'(
      _title: string,
      _time: BigNumberish,
      _ispublic: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    addUsers(
      _survey: BytesLike,
      users: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'addUsers(bytes32,address[])'(
      _survey: BytesLike,
      users: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    dayswappers(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'dayswappers()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    kycDapp(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'kycDapp()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    nrtManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'nrtManager()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the address of the current owner.
     */
    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the address of the current owner.
     */
    'owner()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    prepaidEs(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'prepaidEs()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    randomnessManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'randomnessManager()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    'renounceOwnership()'(
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    resolveAddress(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'resolveAddress(bytes32)'(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    resolveAddressStrict(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'resolveAddressStrict(bytes32)'(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    resolveUsername(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'resolveUsername(address)'(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    resolveUsernameStrict(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'resolveUsernameStrict(address)'(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    sendSurvey(
      _survey: BytesLike,
      _feedback: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'sendSurvey(bytes32,uint16[])'(
      _survey: BytesLike,
      _feedback: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setKycDapp(_kycDapp: string, overrides?: Overrides): Promise<ContractTransaction>;

    'setKycDapp(address)'(_kycDapp: string, overrides?: Overrides): Promise<ContractTransaction>;

    surveys(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      title: string;
      author: string;
      time: BigNumber;
      isPublic: boolean;
      0: string;
      1: string;
      2: BigNumber;
      3: boolean;
    }>;

    'surveys(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      title: string;
      author: string;
      time: BigNumber;
      isPublic: boolean;
      0: string;
      1: string;
      2: BigNumber;
      3: boolean;
    }>;

    timeallyClub(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'timeallyClub()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    timeallyManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'timeallyManager()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    timeallyPromotionalBucket(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'timeallyPromotionalBucket()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(newOwner: string, overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    validatorManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'validatorManager()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  accessUser(arg0: BytesLike, arg1: string, overrides?: CallOverrides): Promise<number>;

  'accessUser(bytes32,address)'(
    arg0: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<number>;

  addSurvey(
    _title: string,
    _time: BigNumberish,
    _ispublic: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  'addSurvey(string,uint256,bool)'(
    _title: string,
    _time: BigNumberish,
    _ispublic: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  addUsers(
    _survey: BytesLike,
    users: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'addUsers(bytes32,address[])'(
    _survey: BytesLike,
    users: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  dayswappers(overrides?: CallOverrides): Promise<string>;

  'dayswappers()'(overrides?: CallOverrides): Promise<string>;

  kycDapp(overrides?: CallOverrides): Promise<string>;

  'kycDapp()'(overrides?: CallOverrides): Promise<string>;

  nrtManager(overrides?: CallOverrides): Promise<string>;

  'nrtManager()'(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  'owner()'(overrides?: CallOverrides): Promise<string>;

  prepaidEs(overrides?: CallOverrides): Promise<string>;

  'prepaidEs()'(overrides?: CallOverrides): Promise<string>;

  randomnessManager(overrides?: CallOverrides): Promise<string>;

  'randomnessManager()'(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(overrides?: CallOverrides): Promise<void>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  'renounceOwnership()'(overrides?: CallOverrides): Promise<void>;

  resolveAddress(_username: BytesLike, overrides?: CallOverrides): Promise<string>;

  'resolveAddress(bytes32)'(_username: BytesLike, overrides?: CallOverrides): Promise<string>;

  resolveAddressStrict(_username: BytesLike, overrides?: CallOverrides): Promise<string>;

  'resolveAddressStrict(bytes32)'(_username: BytesLike, overrides?: CallOverrides): Promise<string>;

  resolveUsername(_wallet: string, overrides?: CallOverrides): Promise<string>;

  'resolveUsername(address)'(_wallet: string, overrides?: CallOverrides): Promise<string>;

  resolveUsernameStrict(_wallet: string, overrides?: CallOverrides): Promise<string>;

  'resolveUsernameStrict(address)'(_wallet: string, overrides?: CallOverrides): Promise<string>;

  sendSurvey(
    _survey: BytesLike,
    _feedback: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'sendSurvey(bytes32,uint16[])'(
    _survey: BytesLike,
    _feedback: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setKycDapp(_kycDapp: string, overrides?: Overrides): Promise<ContractTransaction>;

  'setKycDapp(address)'(_kycDapp: string, overrides?: Overrides): Promise<ContractTransaction>;

  surveys(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    title: string;
    author: string;
    time: BigNumber;
    isPublic: boolean;
    0: string;
    1: string;
    2: BigNumber;
    3: boolean;
  }>;

  'surveys(bytes32)'(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    title: string;
    author: string;
    time: BigNumber;
    isPublic: boolean;
    0: string;
    1: string;
    2: BigNumber;
    3: boolean;
  }>;

  timeallyClub(overrides?: CallOverrides): Promise<string>;

  'timeallyClub()'(overrides?: CallOverrides): Promise<string>;

  timeallyManager(overrides?: CallOverrides): Promise<string>;

  'timeallyManager()'(overrides?: CallOverrides): Promise<string>;

  timeallyPromotionalBucket(overrides?: CallOverrides): Promise<string>;

  'timeallyPromotionalBucket()'(overrides?: CallOverrides): Promise<string>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(newOwner: string, overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  'transferOwnership(address)'(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  validatorManager(overrides?: CallOverrides): Promise<string>;

  'validatorManager()'(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    accessUser(arg0: BytesLike, arg1: string, overrides?: CallOverrides): Promise<number>;

    'accessUser(bytes32,address)'(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<number>;

    addSurvey(
      _title: string,
      _time: BigNumberish,
      _ispublic: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    'addSurvey(string,uint256,bool)'(
      _title: string,
      _time: BigNumberish,
      _ispublic: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    addUsers(_survey: BytesLike, users: string[], overrides?: CallOverrides): Promise<void>;

    'addUsers(bytes32,address[])'(
      _survey: BytesLike,
      users: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    dayswappers(overrides?: CallOverrides): Promise<string>;

    'dayswappers()'(overrides?: CallOverrides): Promise<string>;

    kycDapp(overrides?: CallOverrides): Promise<string>;

    'kycDapp()'(overrides?: CallOverrides): Promise<string>;

    nrtManager(overrides?: CallOverrides): Promise<string>;

    'nrtManager()'(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    'owner()'(overrides?: CallOverrides): Promise<string>;

    prepaidEs(overrides?: CallOverrides): Promise<string>;

    'prepaidEs()'(overrides?: CallOverrides): Promise<string>;

    randomnessManager(overrides?: CallOverrides): Promise<string>;

    'randomnessManager()'(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>;

    resolveAddress(_username: BytesLike, overrides?: CallOverrides): Promise<string>;

    'resolveAddress(bytes32)'(_username: BytesLike, overrides?: CallOverrides): Promise<string>;

    resolveAddressStrict(_username: BytesLike, overrides?: CallOverrides): Promise<string>;

    'resolveAddressStrict(bytes32)'(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    resolveUsername(_wallet: string, overrides?: CallOverrides): Promise<string>;

    'resolveUsername(address)'(_wallet: string, overrides?: CallOverrides): Promise<string>;

    resolveUsernameStrict(_wallet: string, overrides?: CallOverrides): Promise<string>;

    'resolveUsernameStrict(address)'(_wallet: string, overrides?: CallOverrides): Promise<string>;

    sendSurvey(
      _survey: BytesLike,
      _feedback: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    'sendSurvey(bytes32,uint16[])'(
      _survey: BytesLike,
      _feedback: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setKycDapp(_kycDapp: string, overrides?: CallOverrides): Promise<void>;

    'setKycDapp(address)'(_kycDapp: string, overrides?: CallOverrides): Promise<void>;

    surveys(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      title: string;
      author: string;
      time: BigNumber;
      isPublic: boolean;
      0: string;
      1: string;
      2: BigNumber;
      3: boolean;
    }>;

    'surveys(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      title: string;
      author: string;
      time: BigNumber;
      isPublic: boolean;
      0: string;
      1: string;
      2: BigNumber;
      3: boolean;
    }>;

    timeallyClub(overrides?: CallOverrides): Promise<string>;

    'timeallyClub()'(overrides?: CallOverrides): Promise<string>;

    timeallyManager(overrides?: CallOverrides): Promise<string>;

    'timeallyManager()'(overrides?: CallOverrides): Promise<string>;

    timeallyPromotionalBucket(overrides?: CallOverrides): Promise<string>;

    'timeallyPromotionalBucket()'(overrides?: CallOverrides): Promise<string>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    'transferOwnership(address)'(newOwner: string, overrides?: CallOverrides): Promise<void>;

    validatorManager(overrides?: CallOverrides): Promise<string>;

    'validatorManager()'(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Auth1(user: string | null, hash: null): EventFilter;

    NewSurvey(user: string | null, hash: null): EventFilter;

    OwnershipTransferred(previousOwner: string | null, newOwner: string | null): EventFilter;

    SentSurvey(hash: BytesLike | null, answers: null): EventFilter;
  };

  estimateGas: {
    accessUser(arg0: BytesLike, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    'accessUser(bytes32,address)'(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addSurvey(
      _title: string,
      _time: BigNumberish,
      _ispublic: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    'addSurvey(string,uint256,bool)'(
      _title: string,
      _time: BigNumberish,
      _ispublic: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    addUsers(_survey: BytesLike, users: string[], overrides?: Overrides): Promise<BigNumber>;

    'addUsers(bytes32,address[])'(
      _survey: BytesLike,
      users: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    dayswappers(overrides?: CallOverrides): Promise<BigNumber>;

    'dayswappers()'(overrides?: CallOverrides): Promise<BigNumber>;

    kycDapp(overrides?: CallOverrides): Promise<BigNumber>;

    'kycDapp()'(overrides?: CallOverrides): Promise<BigNumber>;

    nrtManager(overrides?: CallOverrides): Promise<BigNumber>;

    'nrtManager()'(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    'owner()'(overrides?: CallOverrides): Promise<BigNumber>;

    prepaidEs(overrides?: CallOverrides): Promise<BigNumber>;

    'prepaidEs()'(overrides?: CallOverrides): Promise<BigNumber>;

    randomnessManager(overrides?: CallOverrides): Promise<BigNumber>;

    'randomnessManager()'(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    'renounceOwnership()'(overrides?: CallOverrides): Promise<BigNumber>;

    resolveAddress(_username: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    'resolveAddress(bytes32)'(_username: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    resolveAddressStrict(_username: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    'resolveAddressStrict(bytes32)'(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolveUsername(_wallet: string, overrides?: CallOverrides): Promise<BigNumber>;

    'resolveUsername(address)'(_wallet: string, overrides?: CallOverrides): Promise<BigNumber>;

    resolveUsernameStrict(_wallet: string, overrides?: CallOverrides): Promise<BigNumber>;

    'resolveUsernameStrict(address)'(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendSurvey(
      _survey: BytesLike,
      _feedback: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    'sendSurvey(bytes32,uint16[])'(
      _survey: BytesLike,
      _feedback: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setKycDapp(_kycDapp: string, overrides?: Overrides): Promise<BigNumber>;

    'setKycDapp(address)'(_kycDapp: string, overrides?: Overrides): Promise<BigNumber>;

    surveys(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    'surveys(bytes32)'(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    timeallyClub(overrides?: CallOverrides): Promise<BigNumber>;

    'timeallyClub()'(overrides?: CallOverrides): Promise<BigNumber>;

    timeallyManager(overrides?: CallOverrides): Promise<BigNumber>;

    'timeallyManager()'(overrides?: CallOverrides): Promise<BigNumber>;

    timeallyPromotionalBucket(overrides?: CallOverrides): Promise<BigNumber>;

    'timeallyPromotionalBucket()'(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(newOwner: string, overrides?: Overrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    'transferOwnership(address)'(newOwner: string, overrides?: Overrides): Promise<BigNumber>;

    validatorManager(overrides?: CallOverrides): Promise<BigNumber>;

    'validatorManager()'(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    accessUser(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'accessUser(bytes32,address)'(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addSurvey(
      _title: string,
      _time: BigNumberish,
      _ispublic: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    'addSurvey(string,uint256,bool)'(
      _title: string,
      _time: BigNumberish,
      _ispublic: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    addUsers(
      _survey: BytesLike,
      users: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'addUsers(bytes32,address[])'(
      _survey: BytesLike,
      users: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    dayswappers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'dayswappers()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kycDapp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'kycDapp()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nrtManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'nrtManager()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prepaidEs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'prepaidEs()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    randomnessManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'randomnessManager()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    'renounceOwnership()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    resolveAddress(_username: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'resolveAddress(bytes32)'(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolveAddressStrict(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'resolveAddressStrict(bytes32)'(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolveUsername(_wallet: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'resolveUsername(address)'(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolveUsernameStrict(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'resolveUsernameStrict(address)'(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sendSurvey(
      _survey: BytesLike,
      _feedback: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'sendSurvey(bytes32,uint16[])'(
      _survey: BytesLike,
      _feedback: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setKycDapp(_kycDapp: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    'setKycDapp(address)'(_kycDapp: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    surveys(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'surveys(bytes32)'(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeallyClub(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'timeallyClub()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeallyManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'timeallyManager()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeallyPromotionalBucket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'timeallyPromotionalBucket()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(newOwner: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    validatorManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'validatorManager()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
