/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PrepaidEsInterface extends ethers.utils.Interface {
  functions: {
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "convertToESP(address)": FunctionFragment;
    "dayswappers()": FunctionFragment;
    "decimals()": FunctionFragment;
    "initialize()": FunctionFragment;
    "isAuthorized(bytes32)": FunctionFragment;
    "kycDapp()": FunctionFragment;
    "name()": FunctionFragment;
    "nrtManager()": FunctionFragment;
    "owner()": FunctionFragment;
    "prepaidEs()": FunctionFragment;
    "randomnessManager()": FunctionFragment;
    "resolveAddress(bytes32)": FunctionFragment;
    "resolveAddressStrict(bytes32)": FunctionFragment;
    "resolveUsername(address)": FunctionFragment;
    "resolveUsernameStrict(address)": FunctionFragment;
    "setKycDapp(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "timeallyClub()": FunctionFragment;
    "timeallyManager()": FunctionFragment;
    "timeallyPromotionalBucket()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferLiquid(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateAuthorization(bytes32,bool)": FunctionFragment;
    "validatorManager()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "convertToESP",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "dayswappers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorized",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "kycDapp", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nrtManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "prepaidEs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "randomnessManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveAddressStrict",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveUsername",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveUsernameStrict",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setKycDapp", values: [string]): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "timeallyClub",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeallyManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeallyPromotionalBucket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferLiquid",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAuthorization",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorManager",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertToESP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dayswappers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kycDapp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nrtManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prepaidEs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "randomnessManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveAddressStrict",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveUsername",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveUsernameStrict",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKycDapp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timeallyClub",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeallyManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeallyPromotionalBucket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferLiquid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorManager",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Authorised(bytes32,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Authorised"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class PrepaidEs extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PrepaidEsInterface;

  functions: {
    /**
     * Function to check the amount of tokens that an owner allowed to a spender.
     * @param _delegate : address The address which will spend the funds.
     * @param _owner : address The address which owns the funds.
     */
    allowance(
      _owner: string,
      _delegate: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Function to check the amount of tokens that an owner allowed to a spender.
     * @param _delegate : address The address which will spend the funds.
     * @param _owner : address The address which owns the funds.
     */
    "allowance(address,address)"(
      _owner: string,
      _delegate: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
     * @param _delegate : The address which will spend the funds.
     * @param _value : The amount of tokens to be spent.
     */
    approve(
      _delegate: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
     * @param _delegate : The address which will spend the funds.
     * @param _value : The amount of tokens to be spent.
     */
    "approve(address,uint256)"(
      _delegate: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Gets the prepaid balance of a holder.
     * @param _owner : Address of tokens owner.
     */
    balanceOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Gets the prepaid balance of a holder.
     * @param _owner : Address of tokens owner.
     */
    "balanceOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Converts native tokens to wrapped format.
     * @param _destination : Address on which prepaid to be credited.
     */
    convertToESP(
      _destination: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    /**
     * Converts native tokens to wrapped format.
     * @param _destination : Address on which prepaid to be credited.
     */
    "convertToESP(address)"(
      _destination: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    dayswappers(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "dayswappers()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    decimals(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "decimals()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    initialize(overrides?: Overrides): Promise<ContractTransaction>;

    "initialize()"(overrides?: Overrides): Promise<ContractTransaction>;

    "isAuthorized(bytes32)"(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isAuthorized(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    kycDapp(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "kycDapp()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    name(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "name()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    nrtManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "nrtManager()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the address of the current owner.
     */
    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    prepaidEs(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "prepaidEs()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    randomnessManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "randomnessManager()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    resolveAddress(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "resolveAddress(bytes32)"(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    resolveAddressStrict(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "resolveAddressStrict(bytes32)"(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    resolveUsername(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "resolveUsername(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    resolveUsernameStrict(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "resolveUsernameStrict(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setKycDapp(
      _kycDapp: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setKycDapp(address)"(
      _kycDapp: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    symbol(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "symbol()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    timeallyClub(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "timeallyClub()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    timeallyManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "timeallyManager()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    timeallyPromotionalBucket(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "timeallyPromotionalBucket()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    totalSupply(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Private method that transfers tokens to receiver.
     * @param _receiver : Address of receiver.
     * @param _value : Number of tokens to transfer.
     */
    transfer(
      _receiver: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Private method that transfers tokens to receiver.
     * @param _receiver : Address of receiver.
     * @param _value : Number of tokens to transfer.
     */
    "transfer(address,uint256)"(
      _receiver: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Transfer tokens from one address to another.
     * @param _owner : address The address which you want to send tokens from.
     * @param _receiver : address The address which you want to transfer to.
     * @param _value : uint256 the amount of tokens to be transferred.
     */
    transferFrom(
      _owner: string,
      _receiver: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Transfer tokens from one address to another.
     * @param _owner : address The address which you want to send tokens from.
     * @param _receiver : address The address which you want to transfer to.
     * @param _value : uint256 the amount of tokens to be transferred.
     */
    "transferFrom(address,address,uint256)"(
      _owner: string,
      _receiver: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Only callable by authorised platforms.
     * Converts prepaid tokens back to native tokens.
     * @param _receiver : Address of native tokens receiver.
     * @param _value : Amount of prepaid es tokens to convert.
     */
    transferLiquid(
      _receiver: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Only callable by authorised platforms.
     * Converts prepaid tokens back to native tokens.
     * @param _receiver : Address of native tokens receiver.
     * @param _value : Amount of prepaid es tokens to convert.
     */
    "transferLiquid(address,uint256)"(
      _receiver: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateAuthorization(
      _username: BytesLike,
      _newStatus: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateAuthorization(bytes32,bool)"(
      _username: BytesLike,
      _newStatus: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    validatorManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "validatorManager()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  /**
   * Function to check the amount of tokens that an owner allowed to a spender.
   * @param _delegate : address The address which will spend the funds.
   * @param _owner : address The address which owns the funds.
   */
  allowance(
    _owner: string,
    _delegate: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Function to check the amount of tokens that an owner allowed to a spender.
   * @param _delegate : address The address which will spend the funds.
   * @param _owner : address The address which owns the funds.
   */
  "allowance(address,address)"(
    _owner: string,
    _delegate: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
   * @param _delegate : The address which will spend the funds.
   * @param _value : The amount of tokens to be spent.
   */
  approve(
    _delegate: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
   * @param _delegate : The address which will spend the funds.
   * @param _value : The amount of tokens to be spent.
   */
  "approve(address,uint256)"(
    _delegate: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Gets the prepaid balance of a holder.
   * @param _owner : Address of tokens owner.
   */
  balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Gets the prepaid balance of a holder.
   * @param _owner : Address of tokens owner.
   */
  "balanceOf(address)"(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Converts native tokens to wrapped format.
   * @param _destination : Address on which prepaid to be credited.
   */
  convertToESP(
    _destination: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  /**
   * Converts native tokens to wrapped format.
   * @param _destination : Address on which prepaid to be credited.
   */
  "convertToESP(address)"(
    _destination: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  dayswappers(overrides?: CallOverrides): Promise<string>;

  "dayswappers()"(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  initialize(overrides?: Overrides): Promise<ContractTransaction>;

  "initialize()"(overrides?: Overrides): Promise<ContractTransaction>;

  "isAuthorized(bytes32)"(
    _username: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isAuthorized(address)"(
    _wallet: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  kycDapp(overrides?: CallOverrides): Promise<string>;

  "kycDapp()"(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  nrtManager(overrides?: CallOverrides): Promise<string>;

  "nrtManager()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  "owner()"(overrides?: CallOverrides): Promise<string>;

  prepaidEs(overrides?: CallOverrides): Promise<string>;

  "prepaidEs()"(overrides?: CallOverrides): Promise<string>;

  randomnessManager(overrides?: CallOverrides): Promise<string>;

  "randomnessManager()"(overrides?: CallOverrides): Promise<string>;

  resolveAddress(
    _username: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "resolveAddress(bytes32)"(
    _username: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  resolveAddressStrict(
    _username: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "resolveAddressStrict(bytes32)"(
    _username: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  resolveUsername(_wallet: string, overrides?: CallOverrides): Promise<string>;

  "resolveUsername(address)"(
    _wallet: string,
    overrides?: CallOverrides
  ): Promise<string>;

  resolveUsernameStrict(
    _wallet: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "resolveUsernameStrict(address)"(
    _wallet: string,
    overrides?: CallOverrides
  ): Promise<string>;

  setKycDapp(
    _kycDapp: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setKycDapp(address)"(
    _kycDapp: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  timeallyClub(overrides?: CallOverrides): Promise<string>;

  "timeallyClub()"(overrides?: CallOverrides): Promise<string>;

  timeallyManager(overrides?: CallOverrides): Promise<string>;

  "timeallyManager()"(overrides?: CallOverrides): Promise<string>;

  timeallyPromotionalBucket(overrides?: CallOverrides): Promise<string>;

  "timeallyPromotionalBucket()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Private method that transfers tokens to receiver.
   * @param _receiver : Address of receiver.
   * @param _value : Number of tokens to transfer.
   */
  transfer(
    _receiver: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Private method that transfers tokens to receiver.
   * @param _receiver : Address of receiver.
   * @param _value : Number of tokens to transfer.
   */
  "transfer(address,uint256)"(
    _receiver: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Transfer tokens from one address to another.
   * @param _owner : address The address which you want to send tokens from.
   * @param _receiver : address The address which you want to transfer to.
   * @param _value : uint256 the amount of tokens to be transferred.
   */
  transferFrom(
    _owner: string,
    _receiver: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Transfer tokens from one address to another.
   * @param _owner : address The address which you want to send tokens from.
   * @param _receiver : address The address which you want to transfer to.
   * @param _value : uint256 the amount of tokens to be transferred.
   */
  "transferFrom(address,address,uint256)"(
    _owner: string,
    _receiver: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Only callable by authorised platforms.
   * Converts prepaid tokens back to native tokens.
   * @param _receiver : Address of native tokens receiver.
   * @param _value : Amount of prepaid es tokens to convert.
   */
  transferLiquid(
    _receiver: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Only callable by authorised platforms.
   * Converts prepaid tokens back to native tokens.
   * @param _receiver : Address of native tokens receiver.
   * @param _value : Amount of prepaid es tokens to convert.
   */
  "transferLiquid(address,uint256)"(
    _receiver: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateAuthorization(
    _username: BytesLike,
    _newStatus: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateAuthorization(bytes32,bool)"(
    _username: BytesLike,
    _newStatus: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  validatorManager(overrides?: CallOverrides): Promise<string>;

  "validatorManager()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    /**
     * Function to check the amount of tokens that an owner allowed to a spender.
     * @param _delegate : address The address which will spend the funds.
     * @param _owner : address The address which owns the funds.
     */
    allowance(
      _owner: string,
      _delegate: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Function to check the amount of tokens that an owner allowed to a spender.
     * @param _delegate : address The address which will spend the funds.
     * @param _owner : address The address which owns the funds.
     */
    "allowance(address,address)"(
      _owner: string,
      _delegate: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
     * @param _delegate : The address which will spend the funds.
     * @param _value : The amount of tokens to be spent.
     */
    approve(
      _delegate: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
     * @param _delegate : The address which will spend the funds.
     * @param _value : The amount of tokens to be spent.
     */
    "approve(address,uint256)"(
      _delegate: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Gets the prepaid balance of a holder.
     * @param _owner : Address of tokens owner.
     */
    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the prepaid balance of a holder.
     * @param _owner : Address of tokens owner.
     */
    "balanceOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Converts native tokens to wrapped format.
     * @param _destination : Address on which prepaid to be credited.
     */
    convertToESP(
      _destination: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Converts native tokens to wrapped format.
     * @param _destination : Address on which prepaid to be credited.
     */
    "convertToESP(address)"(
      _destination: string,
      overrides?: CallOverrides
    ): Promise<void>;

    dayswappers(overrides?: CallOverrides): Promise<string>;

    "dayswappers()"(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    initialize(overrides?: CallOverrides): Promise<void>;

    "initialize()"(overrides?: CallOverrides): Promise<void>;

    "isAuthorized(bytes32)"(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isAuthorized(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    kycDapp(overrides?: CallOverrides): Promise<string>;

    "kycDapp()"(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    nrtManager(overrides?: CallOverrides): Promise<string>;

    "nrtManager()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<string>;

    prepaidEs(overrides?: CallOverrides): Promise<string>;

    "prepaidEs()"(overrides?: CallOverrides): Promise<string>;

    randomnessManager(overrides?: CallOverrides): Promise<string>;

    "randomnessManager()"(overrides?: CallOverrides): Promise<string>;

    resolveAddress(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "resolveAddress(bytes32)"(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    resolveAddressStrict(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "resolveAddressStrict(bytes32)"(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    resolveUsername(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "resolveUsername(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<string>;

    resolveUsernameStrict(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "resolveUsernameStrict(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<string>;

    setKycDapp(_kycDapp: string, overrides?: CallOverrides): Promise<void>;

    "setKycDapp(address)"(
      _kycDapp: string,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    timeallyClub(overrides?: CallOverrides): Promise<string>;

    "timeallyClub()"(overrides?: CallOverrides): Promise<string>;

    timeallyManager(overrides?: CallOverrides): Promise<string>;

    "timeallyManager()"(overrides?: CallOverrides): Promise<string>;

    timeallyPromotionalBucket(overrides?: CallOverrides): Promise<string>;

    "timeallyPromotionalBucket()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Private method that transfers tokens to receiver.
     * @param _receiver : Address of receiver.
     * @param _value : Number of tokens to transfer.
     */
    transfer(
      _receiver: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Private method that transfers tokens to receiver.
     * @param _receiver : Address of receiver.
     * @param _value : Number of tokens to transfer.
     */
    "transfer(address,uint256)"(
      _receiver: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Transfer tokens from one address to another.
     * @param _owner : address The address which you want to send tokens from.
     * @param _receiver : address The address which you want to transfer to.
     * @param _value : uint256 the amount of tokens to be transferred.
     */
    transferFrom(
      _owner: string,
      _receiver: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Transfer tokens from one address to another.
     * @param _owner : address The address which you want to send tokens from.
     * @param _receiver : address The address which you want to transfer to.
     * @param _value : uint256 the amount of tokens to be transferred.
     */
    "transferFrom(address,address,uint256)"(
      _owner: string,
      _receiver: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Only callable by authorised platforms.
     * Converts prepaid tokens back to native tokens.
     * @param _receiver : Address of native tokens receiver.
     * @param _value : Amount of prepaid es tokens to convert.
     */
    transferLiquid(
      _receiver: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Only callable by authorised platforms.
     * Converts prepaid tokens back to native tokens.
     * @param _receiver : Address of native tokens receiver.
     * @param _value : Amount of prepaid es tokens to convert.
     */
    "transferLiquid(address,uint256)"(
      _receiver: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAuthorization(
      _username: BytesLike,
      _newStatus: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateAuthorization(bytes32,bool)"(
      _username: BytesLike,
      _newStatus: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    validatorManager(overrides?: CallOverrides): Promise<string>;

    "validatorManager()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Approval(
      tokenOwner: string | null,
      spender: string | null,
      tokens: null
    ): EventFilter;

    Authorised(wallet: BytesLike | null, newStatus: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Transfer(from: string | null, to: string | null, tokens: null): EventFilter;
  };

  estimateGas: {
    /**
     * Function to check the amount of tokens that an owner allowed to a spender.
     * @param _delegate : address The address which will spend the funds.
     * @param _owner : address The address which owns the funds.
     */
    allowance(
      _owner: string,
      _delegate: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Function to check the amount of tokens that an owner allowed to a spender.
     * @param _delegate : address The address which will spend the funds.
     * @param _owner : address The address which owns the funds.
     */
    "allowance(address,address)"(
      _owner: string,
      _delegate: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
     * @param _delegate : The address which will spend the funds.
     * @param _value : The amount of tokens to be spent.
     */
    approve(
      _delegate: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
     * @param _delegate : The address which will spend the funds.
     * @param _value : The amount of tokens to be spent.
     */
    "approve(address,uint256)"(
      _delegate: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Gets the prepaid balance of a holder.
     * @param _owner : Address of tokens owner.
     */
    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the prepaid balance of a holder.
     * @param _owner : Address of tokens owner.
     */
    "balanceOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Converts native tokens to wrapped format.
     * @param _destination : Address on which prepaid to be credited.
     */
    convertToESP(
      _destination: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    /**
     * Converts native tokens to wrapped format.
     * @param _destination : Address on which prepaid to be credited.
     */
    "convertToESP(address)"(
      _destination: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    dayswappers(overrides?: CallOverrides): Promise<BigNumber>;

    "dayswappers()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(overrides?: Overrides): Promise<BigNumber>;

    "initialize()"(overrides?: Overrides): Promise<BigNumber>;

    "isAuthorized(bytes32)"(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAuthorized(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kycDapp(overrides?: CallOverrides): Promise<BigNumber>;

    "kycDapp()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    nrtManager(overrides?: CallOverrides): Promise<BigNumber>;

    "nrtManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    prepaidEs(overrides?: CallOverrides): Promise<BigNumber>;

    "prepaidEs()"(overrides?: CallOverrides): Promise<BigNumber>;

    randomnessManager(overrides?: CallOverrides): Promise<BigNumber>;

    "randomnessManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    resolveAddress(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "resolveAddress(bytes32)"(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolveAddressStrict(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "resolveAddressStrict(bytes32)"(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolveUsername(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "resolveUsername(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolveUsernameStrict(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "resolveUsernameStrict(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setKycDapp(_kycDapp: string, overrides?: Overrides): Promise<BigNumber>;

    "setKycDapp(address)"(
      _kycDapp: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    timeallyClub(overrides?: CallOverrides): Promise<BigNumber>;

    "timeallyClub()"(overrides?: CallOverrides): Promise<BigNumber>;

    timeallyManager(overrides?: CallOverrides): Promise<BigNumber>;

    "timeallyManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    timeallyPromotionalBucket(overrides?: CallOverrides): Promise<BigNumber>;

    "timeallyPromotionalBucket()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Private method that transfers tokens to receiver.
     * @param _receiver : Address of receiver.
     * @param _value : Number of tokens to transfer.
     */
    transfer(
      _receiver: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Private method that transfers tokens to receiver.
     * @param _receiver : Address of receiver.
     * @param _value : Number of tokens to transfer.
     */
    "transfer(address,uint256)"(
      _receiver: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Transfer tokens from one address to another.
     * @param _owner : address The address which you want to send tokens from.
     * @param _receiver : address The address which you want to transfer to.
     * @param _value : uint256 the amount of tokens to be transferred.
     */
    transferFrom(
      _owner: string,
      _receiver: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Transfer tokens from one address to another.
     * @param _owner : address The address which you want to send tokens from.
     * @param _receiver : address The address which you want to transfer to.
     * @param _value : uint256 the amount of tokens to be transferred.
     */
    "transferFrom(address,address,uint256)"(
      _owner: string,
      _receiver: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Only callable by authorised platforms.
     * Converts prepaid tokens back to native tokens.
     * @param _receiver : Address of native tokens receiver.
     * @param _value : Amount of prepaid es tokens to convert.
     */
    transferLiquid(
      _receiver: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Only callable by authorised platforms.
     * Converts prepaid tokens back to native tokens.
     * @param _receiver : Address of native tokens receiver.
     * @param _value : Amount of prepaid es tokens to convert.
     */
    "transferLiquid(address,uint256)"(
      _receiver: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateAuthorization(
      _username: BytesLike,
      _newStatus: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateAuthorization(bytes32,bool)"(
      _username: BytesLike,
      _newStatus: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    validatorManager(overrides?: CallOverrides): Promise<BigNumber>;

    "validatorManager()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Function to check the amount of tokens that an owner allowed to a spender.
     * @param _delegate : address The address which will spend the funds.
     * @param _owner : address The address which owns the funds.
     */
    allowance(
      _owner: string,
      _delegate: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Function to check the amount of tokens that an owner allowed to a spender.
     * @param _delegate : address The address which will spend the funds.
     * @param _owner : address The address which owns the funds.
     */
    "allowance(address,address)"(
      _owner: string,
      _delegate: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
     * @param _delegate : The address which will spend the funds.
     * @param _value : The amount of tokens to be spent.
     */
    approve(
      _delegate: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
     * @param _delegate : The address which will spend the funds.
     * @param _value : The amount of tokens to be spent.
     */
    "approve(address,uint256)"(
      _delegate: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the prepaid balance of a holder.
     * @param _owner : Address of tokens owner.
     */
    balanceOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the prepaid balance of a holder.
     * @param _owner : Address of tokens owner.
     */
    "balanceOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Converts native tokens to wrapped format.
     * @param _destination : Address on which prepaid to be credited.
     */
    convertToESP(
      _destination: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Converts native tokens to wrapped format.
     * @param _destination : Address on which prepaid to be credited.
     */
    "convertToESP(address)"(
      _destination: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    dayswappers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dayswappers()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(overrides?: Overrides): Promise<PopulatedTransaction>;

    "initialize()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    "isAuthorized(bytes32)"(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAuthorized(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kycDapp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "kycDapp()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nrtManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nrtManager()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prepaidEs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "prepaidEs()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    randomnessManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "randomnessManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolveAddress(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "resolveAddress(bytes32)"(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolveAddressStrict(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "resolveAddressStrict(bytes32)"(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolveUsername(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "resolveUsername(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolveUsernameStrict(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "resolveUsernameStrict(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setKycDapp(
      _kycDapp: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setKycDapp(address)"(
      _kycDapp: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeallyClub(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "timeallyClub()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeallyManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "timeallyManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timeallyPromotionalBucket(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "timeallyPromotionalBucket()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Private method that transfers tokens to receiver.
     * @param _receiver : Address of receiver.
     * @param _value : Number of tokens to transfer.
     */
    transfer(
      _receiver: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Private method that transfers tokens to receiver.
     * @param _receiver : Address of receiver.
     * @param _value : Number of tokens to transfer.
     */
    "transfer(address,uint256)"(
      _receiver: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfer tokens from one address to another.
     * @param _owner : address The address which you want to send tokens from.
     * @param _receiver : address The address which you want to transfer to.
     * @param _value : uint256 the amount of tokens to be transferred.
     */
    transferFrom(
      _owner: string,
      _receiver: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfer tokens from one address to another.
     * @param _owner : address The address which you want to send tokens from.
     * @param _receiver : address The address which you want to transfer to.
     * @param _value : uint256 the amount of tokens to be transferred.
     */
    "transferFrom(address,address,uint256)"(
      _owner: string,
      _receiver: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Only callable by authorised platforms.
     * Converts prepaid tokens back to native tokens.
     * @param _receiver : Address of native tokens receiver.
     * @param _value : Amount of prepaid es tokens to convert.
     */
    transferLiquid(
      _receiver: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Only callable by authorised platforms.
     * Converts prepaid tokens back to native tokens.
     * @param _receiver : Address of native tokens receiver.
     * @param _value : Amount of prepaid es tokens to convert.
     */
    "transferLiquid(address,uint256)"(
      _receiver: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateAuthorization(
      _username: BytesLike,
      _newStatus: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateAuthorization(bytes32,bool)"(
      _username: BytesLike,
      _newStatus: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    validatorManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "validatorManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
