/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ChatInterface extends ethers.utils.Interface {
  functions: {
    "init(address,address,uint256)": FunctionFragment;
    "sendMessage(string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "init",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "sendMessage", values: [string]): string;

  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;

  events: {
    "messageSentEvent(address,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "messageSentEvent"): EventFragment;
}

export class Chat extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ChatInterface;

  functions: {
    init(
      _expert: string,
      _patient: string,
      _blocknumber: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "init(address,address,uint256)"(
      _expert: string,
      _patient: string,
      _blocknumber: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sendMessage(
      message: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sendMessage(string)"(
      message: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  init(
    _expert: string,
    _patient: string,
    _blocknumber: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "init(address,address,uint256)"(
    _expert: string,
    _patient: string,
    _blocknumber: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sendMessage(
    message: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sendMessage(string)"(
    message: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    init(
      _expert: string,
      _patient: string,
      _blocknumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "init(address,address,uint256)"(
      _expert: string,
      _patient: string,
      _blocknumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sendMessage(message: string, overrides?: CallOverrides): Promise<void>;

    "sendMessage(string)"(
      message: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    messageSentEvent(
      Sender: string | null,
      message: null,
      Time: null
    ): EventFilter;
  };

  estimateGas: {
    init(
      _expert: string,
      _patient: string,
      _blocknumber: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "init(address,address,uint256)"(
      _expert: string,
      _patient: string,
      _blocknumber: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    sendMessage(message: string, overrides?: Overrides): Promise<BigNumber>;

    "sendMessage(string)"(
      message: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    init(
      _expert: string,
      _patient: string,
      _blocknumber: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "init(address,address,uint256)"(
      _expert: string,
      _patient: string,
      _blocknumber: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sendMessage(
      message: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sendMessage(string)"(
      message: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
