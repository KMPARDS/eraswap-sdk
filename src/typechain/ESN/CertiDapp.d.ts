/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface CertiDappInterface extends ethers.utils.Interface {
  functions: {
    "Incentives(address)": FunctionFragment;
    "addAuthority(string,string,string)": FunctionFragment;
    "announceIncentive(uint256)": FunctionFragment;
    "authorities(address)": FunctionFragment;
    "certificates(bytes32)": FunctionFragment;
    "collect(bytes32)": FunctionFragment;
    "dayswappers()": FunctionFragment;
    "donate(bytes32)": FunctionFragment;
    "getBalance(bytes32)": FunctionFragment;
    "kycDapp()": FunctionFragment;
    "nrtManager()": FunctionFragment;
    "owner()": FunctionFragment;
    "prepaidEs()": FunctionFragment;
    "randomnessManager()": FunctionFragment;
    "registerCertificates(string,bytes,address)": FunctionFragment;
    "resolveAddress(bytes32)": FunctionFragment;
    "resolveAddressStrict(bytes32)": FunctionFragment;
    "resolveUsername(address)": FunctionFragment;
    "resolveUsernameStrict(address)": FunctionFragment;
    "setKycDapp(address)": FunctionFragment;
    "splitSignature(bytes)": FunctionFragment;
    "timeallyClub()": FunctionFragment;
    "timeallyManager()": FunctionFragment;
    "timeallyPromotionalBucket()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "validatorManager()": FunctionFragment;
    "verifyString(string,bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "Incentives", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addAuthority",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "announceIncentive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "authorities", values: [string]): string;
  encodeFunctionData(
    functionFragment: "certificates",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "collect", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "dayswappers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "donate", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "kycDapp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nrtManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "prepaidEs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "randomnessManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerCertificates",
    values: [string, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveAddressStrict",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveUsername",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveUsernameStrict",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setKycDapp", values: [string]): string;
  encodeFunctionData(
    functionFragment: "splitSignature",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "timeallyClub",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeallyManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeallyPromotionalBucket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyString",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "Incentives", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "announceIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "certificates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dayswappers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kycDapp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nrtManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prepaidEs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "randomnessManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerCertificates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveAddressStrict",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveUsername",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveUsernameStrict",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKycDapp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "splitSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeallyClub",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeallyManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeallyPromotionalBucket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyString",
    data: BytesLike
  ): Result;

  events: {
    "Authorities(address)": EventFragment;
    "Donate(bytes32,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RegisterCertificates(bytes32,address,address)": EventFragment;
    "SignCertificate(bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Authorities"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Donate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisterCertificates"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignCertificate"): EventFragment;
}

export class CertiDapp extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: CertiDappInterface;

  functions: {
    Incentives(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "Incentives(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    addAuthority(
      _name: string,
      _website: string,
      _image: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "addAuthority(string,string,string)"(
      _name: string,
      _website: string,
      _image: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    announceIncentive(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "announceIncentive(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    authorities(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      name: string;
      website: string;
      image: string;
      status: number;
      0: string;
      1: string;
      2: string;
      3: number;
    }>;

    "authorities(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      name: string;
      website: string;
      image: string;
      status: number;
      0: string;
      1: string;
      2: string;
      3: number;
    }>;

    certificates(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      hash: string;
      Signer: string;
      Verifier: string;
      Balance: BigNumber;
      0: string;
      1: string;
      2: string;
      3: BigNumber;
    }>;

    "certificates(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      hash: string;
      Signer: string;
      Verifier: string;
      Balance: BigNumber;
      0: string;
      1: string;
      2: string;
      3: BigNumber;
    }>;

    collect(
      input: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "collect(bytes32)"(
      input: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    dayswappers(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "dayswappers()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    donate(
      input: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "donate(bytes32)"(
      input: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    getBalance(
      input: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getBalance(bytes32)"(
      input: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    kycDapp(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "kycDapp()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    nrtManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "nrtManager()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the address of the current owner.
     */
    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    prepaidEs(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "prepaidEs()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    randomnessManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "randomnessManager()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    registerCertificates(
      _hash: string,
      _signature: BytesLike,
      _Signer: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "registerCertificates(string,bytes,address)"(
      _hash: string,
      _signature: BytesLike,
      _Signer: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    resolveAddress(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "resolveAddress(bytes32)"(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    resolveAddressStrict(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "resolveAddressStrict(bytes32)"(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    resolveUsername(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "resolveUsername(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    resolveUsernameStrict(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "resolveUsernameStrict(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setKycDapp(
      _kycDapp: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setKycDapp(address)"(
      _kycDapp: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    splitSignature(
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
      1: string;
      2: string;
    }>;

    "splitSignature(bytes)"(
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
      1: string;
      2: string;
    }>;

    timeallyClub(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "timeallyClub()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    timeallyManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "timeallyManager()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    timeallyPromotionalBucket(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "timeallyPromotionalBucket()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    validatorManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "validatorManager()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    verifyString(
      message: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      signer: string;
      0: string;
    }>;

    "verifyString(string,bytes)"(
      message: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      signer: string;
      0: string;
    }>;
  };

  Incentives(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "Incentives(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addAuthority(
    _name: string,
    _website: string,
    _image: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "addAuthority(string,string,string)"(
    _name: string,
    _website: string,
    _image: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  announceIncentive(
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "announceIncentive(uint256)"(
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  authorities(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    name: string;
    website: string;
    image: string;
    status: number;
    0: string;
    1: string;
    2: string;
    3: number;
  }>;

  "authorities(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    name: string;
    website: string;
    image: string;
    status: number;
    0: string;
    1: string;
    2: string;
    3: number;
  }>;

  certificates(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    hash: string;
    Signer: string;
    Verifier: string;
    Balance: BigNumber;
    0: string;
    1: string;
    2: string;
    3: BigNumber;
  }>;

  "certificates(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    hash: string;
    Signer: string;
    Verifier: string;
    Balance: BigNumber;
    0: string;
    1: string;
    2: string;
    3: BigNumber;
  }>;

  collect(
    input: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "collect(bytes32)"(
    input: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  dayswappers(overrides?: CallOverrides): Promise<string>;

  "dayswappers()"(overrides?: CallOverrides): Promise<string>;

  donate(
    input: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "donate(bytes32)"(
    input: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  getBalance(input: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  "getBalance(bytes32)"(
    input: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  kycDapp(overrides?: CallOverrides): Promise<string>;

  "kycDapp()"(overrides?: CallOverrides): Promise<string>;

  nrtManager(overrides?: CallOverrides): Promise<string>;

  "nrtManager()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  "owner()"(overrides?: CallOverrides): Promise<string>;

  prepaidEs(overrides?: CallOverrides): Promise<string>;

  "prepaidEs()"(overrides?: CallOverrides): Promise<string>;

  randomnessManager(overrides?: CallOverrides): Promise<string>;

  "randomnessManager()"(overrides?: CallOverrides): Promise<string>;

  registerCertificates(
    _hash: string,
    _signature: BytesLike,
    _Signer: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "registerCertificates(string,bytes,address)"(
    _hash: string,
    _signature: BytesLike,
    _Signer: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  resolveAddress(
    _username: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "resolveAddress(bytes32)"(
    _username: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  resolveAddressStrict(
    _username: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "resolveAddressStrict(bytes32)"(
    _username: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  resolveUsername(_wallet: string, overrides?: CallOverrides): Promise<string>;

  "resolveUsername(address)"(
    _wallet: string,
    overrides?: CallOverrides
  ): Promise<string>;

  resolveUsernameStrict(
    _wallet: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "resolveUsernameStrict(address)"(
    _wallet: string,
    overrides?: CallOverrides
  ): Promise<string>;

  setKycDapp(
    _kycDapp: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setKycDapp(address)"(
    _kycDapp: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  splitSignature(
    sig: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    0: number;
    1: string;
    2: string;
  }>;

  "splitSignature(bytes)"(
    sig: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    0: number;
    1: string;
    2: string;
  }>;

  timeallyClub(overrides?: CallOverrides): Promise<string>;

  "timeallyClub()"(overrides?: CallOverrides): Promise<string>;

  timeallyManager(overrides?: CallOverrides): Promise<string>;

  "timeallyManager()"(overrides?: CallOverrides): Promise<string>;

  timeallyPromotionalBucket(overrides?: CallOverrides): Promise<string>;

  "timeallyPromotionalBucket()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  validatorManager(overrides?: CallOverrides): Promise<string>;

  "validatorManager()"(overrides?: CallOverrides): Promise<string>;

  verifyString(
    message: string,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "verifyString(string,bytes)"(
    message: string,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    Incentives(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "Incentives(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addAuthority(
      _name: string,
      _website: string,
      _image: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addAuthority(string,string,string)"(
      _name: string,
      _website: string,
      _image: string,
      overrides?: CallOverrides
    ): Promise<void>;

    announceIncentive(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "announceIncentive(uint256)"(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    authorities(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      name: string;
      website: string;
      image: string;
      status: number;
      0: string;
      1: string;
      2: string;
      3: number;
    }>;

    "authorities(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      name: string;
      website: string;
      image: string;
      status: number;
      0: string;
      1: string;
      2: string;
      3: number;
    }>;

    certificates(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      hash: string;
      Signer: string;
      Verifier: string;
      Balance: BigNumber;
      0: string;
      1: string;
      2: string;
      3: BigNumber;
    }>;

    "certificates(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      hash: string;
      Signer: string;
      Verifier: string;
      Balance: BigNumber;
      0: string;
      1: string;
      2: string;
      3: BigNumber;
    }>;

    collect(input: BytesLike, overrides?: CallOverrides): Promise<void>;

    "collect(bytes32)"(
      input: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    dayswappers(overrides?: CallOverrides): Promise<string>;

    "dayswappers()"(overrides?: CallOverrides): Promise<string>;

    donate(input: BytesLike, overrides?: CallOverrides): Promise<void>;

    "donate(bytes32)"(
      input: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getBalance(input: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "getBalance(bytes32)"(
      input: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kycDapp(overrides?: CallOverrides): Promise<string>;

    "kycDapp()"(overrides?: CallOverrides): Promise<string>;

    nrtManager(overrides?: CallOverrides): Promise<string>;

    "nrtManager()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<string>;

    prepaidEs(overrides?: CallOverrides): Promise<string>;

    "prepaidEs()"(overrides?: CallOverrides): Promise<string>;

    randomnessManager(overrides?: CallOverrides): Promise<string>;

    "randomnessManager()"(overrides?: CallOverrides): Promise<string>;

    registerCertificates(
      _hash: string,
      _signature: BytesLike,
      _Signer: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "registerCertificates(string,bytes,address)"(
      _hash: string,
      _signature: BytesLike,
      _Signer: string,
      overrides?: CallOverrides
    ): Promise<string>;

    resolveAddress(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "resolveAddress(bytes32)"(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    resolveAddressStrict(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "resolveAddressStrict(bytes32)"(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    resolveUsername(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "resolveUsername(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<string>;

    resolveUsernameStrict(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "resolveUsernameStrict(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<string>;

    setKycDapp(_kycDapp: string, overrides?: CallOverrides): Promise<void>;

    "setKycDapp(address)"(
      _kycDapp: string,
      overrides?: CallOverrides
    ): Promise<void>;

    splitSignature(
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
      1: string;
      2: string;
    }>;

    "splitSignature(bytes)"(
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
      1: string;
      2: string;
    }>;

    timeallyClub(overrides?: CallOverrides): Promise<string>;

    "timeallyClub()"(overrides?: CallOverrides): Promise<string>;

    timeallyManager(overrides?: CallOverrides): Promise<string>;

    "timeallyManager()"(overrides?: CallOverrides): Promise<string>;

    timeallyPromotionalBucket(overrides?: CallOverrides): Promise<string>;

    "timeallyPromotionalBucket()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    validatorManager(overrides?: CallOverrides): Promise<string>;

    "validatorManager()"(overrides?: CallOverrides): Promise<string>;

    verifyString(
      message: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "verifyString(string,bytes)"(
      message: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    Authorities(_auth: null): EventFilter;

    Donate(hashedinput: null, doner: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    RegisterCertificates(
      hashedinput: null,
      _signer: null,
      _verifier: null
    ): EventFilter;

    SignCertificate(hashedinput: null, _signer: null): EventFilter;
  };

  estimateGas: {
    Incentives(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "Incentives(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addAuthority(
      _name: string,
      _website: string,
      _image: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "addAuthority(string,string,string)"(
      _name: string,
      _website: string,
      _image: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    announceIncentive(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "announceIncentive(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    authorities(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "authorities(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    certificates(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "certificates(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collect(input: BytesLike, overrides?: PayableOverrides): Promise<BigNumber>;

    "collect(bytes32)"(
      input: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    dayswappers(overrides?: CallOverrides): Promise<BigNumber>;

    "dayswappers()"(overrides?: CallOverrides): Promise<BigNumber>;

    donate(input: BytesLike, overrides?: PayableOverrides): Promise<BigNumber>;

    "donate(bytes32)"(
      input: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    getBalance(input: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "getBalance(bytes32)"(
      input: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kycDapp(overrides?: CallOverrides): Promise<BigNumber>;

    "kycDapp()"(overrides?: CallOverrides): Promise<BigNumber>;

    nrtManager(overrides?: CallOverrides): Promise<BigNumber>;

    "nrtManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    prepaidEs(overrides?: CallOverrides): Promise<BigNumber>;

    "prepaidEs()"(overrides?: CallOverrides): Promise<BigNumber>;

    randomnessManager(overrides?: CallOverrides): Promise<BigNumber>;

    "randomnessManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    registerCertificates(
      _hash: string,
      _signature: BytesLike,
      _Signer: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "registerCertificates(string,bytes,address)"(
      _hash: string,
      _signature: BytesLike,
      _Signer: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    resolveAddress(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "resolveAddress(bytes32)"(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolveAddressStrict(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "resolveAddressStrict(bytes32)"(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolveUsername(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "resolveUsername(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolveUsernameStrict(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "resolveUsernameStrict(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setKycDapp(_kycDapp: string, overrides?: Overrides): Promise<BigNumber>;

    "setKycDapp(address)"(
      _kycDapp: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    splitSignature(
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "splitSignature(bytes)"(
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timeallyClub(overrides?: CallOverrides): Promise<BigNumber>;

    "timeallyClub()"(overrides?: CallOverrides): Promise<BigNumber>;

    timeallyManager(overrides?: CallOverrides): Promise<BigNumber>;

    "timeallyManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    timeallyPromotionalBucket(overrides?: CallOverrides): Promise<BigNumber>;

    "timeallyPromotionalBucket()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    validatorManager(overrides?: CallOverrides): Promise<BigNumber>;

    "validatorManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    verifyString(
      message: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "verifyString(string,bytes)"(
      message: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    Incentives(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "Incentives(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAuthority(
      _name: string,
      _website: string,
      _image: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "addAuthority(string,string,string)"(
      _name: string,
      _website: string,
      _image: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    announceIncentive(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "announceIncentive(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    authorities(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "authorities(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    certificates(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "certificates(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collect(
      input: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "collect(bytes32)"(
      input: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    dayswappers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dayswappers()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    donate(
      input: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "donate(bytes32)"(
      input: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    getBalance(
      input: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBalance(bytes32)"(
      input: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kycDapp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "kycDapp()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nrtManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nrtManager()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prepaidEs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "prepaidEs()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    randomnessManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "randomnessManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerCertificates(
      _hash: string,
      _signature: BytesLike,
      _Signer: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "registerCertificates(string,bytes,address)"(
      _hash: string,
      _signature: BytesLike,
      _Signer: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    resolveAddress(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "resolveAddress(bytes32)"(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolveAddressStrict(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "resolveAddressStrict(bytes32)"(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolveUsername(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "resolveUsername(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolveUsernameStrict(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "resolveUsernameStrict(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setKycDapp(
      _kycDapp: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setKycDapp(address)"(
      _kycDapp: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    splitSignature(
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "splitSignature(bytes)"(
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timeallyClub(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "timeallyClub()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeallyManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "timeallyManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timeallyPromotionalBucket(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "timeallyPromotionalBucket()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    validatorManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "validatorManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyString(
      message: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "verifyString(string,bytes)"(
      message: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
