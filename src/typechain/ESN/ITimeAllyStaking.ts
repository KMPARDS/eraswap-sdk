/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers';
import { Contract, ContractTransaction, Overrides, CallOverrides } from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

interface ITimeAllyStakingInterface extends ethers.utils.Interface {
  functions: {
    'increaseIssTime(uint256)': FunctionFragment;
    'principal()': FunctionFragment;
    'startMonth()': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'increaseIssTime', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'principal', values?: undefined): string;
  encodeFunctionData(functionFragment: 'startMonth', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'increaseIssTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'principal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'startMonth', data: BytesLike): Result;

  events: {};
}

export abstract class ITimeAllyStaking extends Contract {
  abstract connect(signerOrProvider: Signer | Provider | string): this;
  abstract attach(addressOrName: string): this;
  abstract deployed(): Promise<this>;

  abstract on(event: EventFilter | string, listener: Listener): this;
  abstract once(event: EventFilter | string, listener: Listener): this;
  abstract addListener(eventName: EventFilter | string, listener: Listener): this;
  abstract removeAllListeners(eventName: EventFilter | string): this;
  abstract removeListener(eventName: any, listener: Listener): this;

  abstract interface: ITimeAllyStakingInterface;

  abstract functions: {
    increaseIssTime(
      _increaseValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'increaseIssTime(uint256)'(
      _increaseValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    principal(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'principal()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    startMonth(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    'startMonth()'(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;
  };

  abstract increaseIssTime(
    _increaseValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  abstract 'increaseIssTime(uint256)'(
    _increaseValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  abstract principal(overrides?: CallOverrides): Promise<BigNumber>;

  abstract 'principal()'(overrides?: CallOverrides): Promise<BigNumber>;

  abstract startMonth(overrides?: CallOverrides): Promise<number>;

  abstract 'startMonth()'(overrides?: CallOverrides): Promise<number>;

  abstract callStatic: {
    increaseIssTime(_increaseValue: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'increaseIssTime(uint256)'(
      _increaseValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    principal(overrides?: CallOverrides): Promise<BigNumber>;

    'principal()'(overrides?: CallOverrides): Promise<BigNumber>;

    startMonth(overrides?: CallOverrides): Promise<number>;

    'startMonth()'(overrides?: CallOverrides): Promise<number>;
  };

  abstract filters: {};

  abstract estimateGas: {
    increaseIssTime(_increaseValue: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    'increaseIssTime(uint256)'(
      _increaseValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    principal(overrides?: CallOverrides): Promise<BigNumber>;

    'principal()'(overrides?: CallOverrides): Promise<BigNumber>;

    startMonth(overrides?: CallOverrides): Promise<BigNumber>;

    'startMonth()'(overrides?: CallOverrides): Promise<BigNumber>;
  };

  abstract populateTransaction: {
    increaseIssTime(
      _increaseValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'increaseIssTime(uint256)'(
      _increaseValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    principal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'principal()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startMonth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'startMonth()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
