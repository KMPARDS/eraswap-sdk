/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers';
import { Contract, ContractTransaction, Overrides, CallOverrides } from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

interface IRegistryDependentInterface extends ethers.utils.Interface {
  functions: {
    'kycDapp()': FunctionFragment;
    'setKycDapp(address)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'kycDapp', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setKycDapp', values: [string]): string;

  decodeFunctionResult(functionFragment: 'kycDapp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setKycDapp', data: BytesLike): Result;

  events: {};
}

export abstract class IRegistryDependent extends Contract {
  abstract connect(signerOrProvider: Signer | Provider | string): this;
  abstract attach(addressOrName: string): this;
  abstract deployed(): Promise<this>;

  abstract on(event: EventFilter | string, listener: Listener): this;
  abstract once(event: EventFilter | string, listener: Listener): this;
  abstract addListener(eventName: EventFilter | string, listener: Listener): this;
  abstract removeAllListeners(eventName: EventFilter | string): this;
  abstract removeListener(eventName: any, listener: Listener): this;

  abstract interface: IRegistryDependentInterface;

  abstract functions: {
    kycDapp(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'kycDapp()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setKycDapp(_kycDapp: string, overrides?: Overrides): Promise<ContractTransaction>;

    'setKycDapp(address)'(_kycDapp: string, overrides?: Overrides): Promise<ContractTransaction>;
  };

  abstract kycDapp(overrides?: CallOverrides): Promise<string>;

  abstract 'kycDapp()'(overrides?: CallOverrides): Promise<string>;

  abstract setKycDapp(_kycDapp: string, overrides?: Overrides): Promise<ContractTransaction>;

  abstract 'setKycDapp(address)'(
    _kycDapp: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  abstract callStatic: {
    kycDapp(overrides?: CallOverrides): Promise<string>;

    'kycDapp()'(overrides?: CallOverrides): Promise<string>;

    setKycDapp(_kycDapp: string, overrides?: CallOverrides): Promise<void>;

    'setKycDapp(address)'(_kycDapp: string, overrides?: CallOverrides): Promise<void>;
  };

  abstract filters: {};

  abstract estimateGas: {
    kycDapp(overrides?: CallOverrides): Promise<BigNumber>;

    'kycDapp()'(overrides?: CallOverrides): Promise<BigNumber>;

    setKycDapp(_kycDapp: string, overrides?: Overrides): Promise<BigNumber>;

    'setKycDapp(address)'(_kycDapp: string, overrides?: Overrides): Promise<BigNumber>;
  };

  abstract populateTransaction: {
    kycDapp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'kycDapp()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setKycDapp(_kycDapp: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    'setKycDapp(address)'(_kycDapp: string, overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
