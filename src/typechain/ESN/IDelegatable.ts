/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers';
import { Contract, ContractTransaction, Overrides, CallOverrides } from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

interface IDelegatableInterface extends ethers.utils.Interface {
  functions: {
    'registerDelegation(uint32,bytes)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'registerDelegation',
    values: [BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: 'registerDelegation', data: BytesLike): Result;

  events: {};
}

export abstract class IDelegatable extends Contract {
  abstract connect(signerOrProvider: Signer | Provider | string): this;
  abstract attach(addressOrName: string): this;
  abstract deployed(): Promise<this>;

  abstract on(event: EventFilter | string, listener: Listener): this;
  abstract once(event: EventFilter | string, listener: Listener): this;
  abstract addListener(eventName: EventFilter | string, listener: Listener): this;
  abstract removeAllListeners(eventName: EventFilter | string): this;
  abstract removeListener(eventName: any, listener: Listener): this;

  abstract interface: IDelegatableInterface;

  abstract functions: {
    registerDelegation(
      _month: BigNumberish,
      _extraData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'registerDelegation(uint32,bytes)'(
      _month: BigNumberish,
      _extraData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  abstract registerDelegation(
    _month: BigNumberish,
    _extraData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  abstract 'registerDelegation(uint32,bytes)'(
    _month: BigNumberish,
    _extraData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  abstract callStatic: {
    registerDelegation(
      _month: BigNumberish,
      _extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    'registerDelegation(uint32,bytes)'(
      _month: BigNumberish,
      _extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  abstract filters: {};

  abstract estimateGas: {
    registerDelegation(
      _month: BigNumberish,
      _extraData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'registerDelegation(uint32,bytes)'(
      _month: BigNumberish,
      _extraData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  abstract populateTransaction: {
    registerDelegation(
      _month: BigNumberish,
      _extraData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'registerDelegation(uint32,bytes)'(
      _month: BigNumberish,
      _extraData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
