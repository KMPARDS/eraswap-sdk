/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers';
import { Contract, ContractTransaction, Overrides, CallOverrides } from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

interface ReversePlasmaInterface extends ethers.utils.Interface {
  functions: {
    'finalizeProposal(uint256,uint256)': FunctionFragment;
    'findProposal(uint256,bytes32,bytes32)': FunctionFragment;
    'getAllValidators()': FunctionFragment;
    'getEthHeaderProposal(uint256,uint256)': FunctionFragment;
    'getEthHeaderProposals(uint256)': FunctionFragment;
    'getFinalizedEthHeader(uint256)': FunctionFragment;
    'getProposalValidators(uint256,uint256)': FunctionFragment;
    'getProposalsCount(uint256)': FunctionFragment;
    'getValidator(uint256)': FunctionFragment;
    'isValidator(address)': FunctionFragment;
    'latestBlockNumber()': FunctionFragment;
    'owner()': FunctionFragment;
    'proposeBlock(uint256,bytes32,bytes32)': FunctionFragment;
    'setInitialValues(uint256,address[])': FunctionFragment;
    'setValidators(address[])': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'finalizeProposal',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'findProposal',
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: 'getAllValidators', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getEthHeaderProposal',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'getEthHeaderProposals', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getFinalizedEthHeader', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'getProposalValidators',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'getProposalsCount', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getValidator', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'isValidator', values: [string]): string;
  encodeFunctionData(functionFragment: 'latestBlockNumber', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'proposeBlock',
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'setInitialValues',
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(functionFragment: 'setValidators', values: [string[]]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;

  decodeFunctionResult(functionFragment: 'finalizeProposal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'findProposal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAllValidators', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getEthHeaderProposal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getEthHeaderProposals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getFinalizedEthHeader', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getProposalValidators', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getProposalsCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getValidator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isValidator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'latestBlockNumber', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'proposeBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setInitialValues', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setValidators', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;

  events: {
    'NewBlockHeader(uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'NewBlockHeader'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
}

export class ReversePlasma extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ReversePlasmaInterface;

  functions: {
    /**
     * Finalizes a proposal on which consensus is acheived.
     * @param _ethBlockNumber ETH block number of the proposal.
     * @param _proposalId Proposal Id of the proposal.
     */
    finalizeProposal(
      _ethBlockNumber: BigNumberish,
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Finalizes a proposal on which consensus is acheived.
     * @param _ethBlockNumber ETH block number of the proposal.
     * @param _proposalId Proposal Id of the proposal.
     */
    'finalizeProposal(uint256,uint256)'(
      _ethBlockNumber: BigNumberish,
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Finds if same proposal is already created
     * @param _ethBlockNumber : ETH block number.
     * @param _receiptsRoot : MPT receipts root
     * @param _transactionsRoot : MPT transactions root
     */
    findProposal(
      _ethBlockNumber: BigNumberish,
      _transactionsRoot: BytesLike,
      _receiptsRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
      1: BigNumber;
    }>;

    /**
     * Finds if same proposal is already created
     * @param _ethBlockNumber : ETH block number.
     * @param _receiptsRoot : MPT receipts root
     * @param _transactionsRoot : MPT transactions root
     */
    'findProposal(uint256,bytes32,bytes32)'(
      _ethBlockNumber: BigNumberish,
      _transactionsRoot: BytesLike,
      _receiptsRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
      1: BigNumber;
    }>;

    getAllValidators(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    'getAllValidators()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    /**
     * Gets a block proposal.
     * @param _ethBlockNumber : ETH block number.
     * @param _proposalId : Id of the proposal.
     */
    getEthHeaderProposal(
      _ethBlockNumber: BigNumberish,
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        transactionsRoot: string;
        receiptsRoot: string;
        proposalValidators: string[];
        0: string;
        1: string;
        2: string[];
      };
    }>;

    /**
     * Gets a block proposal.
     * @param _ethBlockNumber : ETH block number.
     * @param _proposalId : Id of the proposal.
     */
    'getEthHeaderProposal(uint256,uint256)'(
      _ethBlockNumber: BigNumberish,
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        transactionsRoot: string;
        receiptsRoot: string;
        proposalValidators: string[];
        0: string;
        1: string;
        2: string[];
      };
    }>;

    /**
     * Gets all proposals for an ETH block.
     * @param _ethBlockNumber : ETH block number.
     */
    getEthHeaderProposals(
      _ethBlockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        transactionsRoot: string;
        receiptsRoot: string;
        proposalValidators: string[];
        0: string;
        1: string;
        2: string[];
      }[];
    }>;

    /**
     * Gets all proposals for an ETH block.
     * @param _ethBlockNumber : ETH block number.
     */
    'getEthHeaderProposals(uint256)'(
      _ethBlockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        transactionsRoot: string;
        receiptsRoot: string;
        proposalValidators: string[];
        0: string;
        1: string;
        2: string[];
      }[];
    }>;

    /**
     * Must check if roots are non-zero.
     * Gets a finalised header.
     * @param _blockNumber : ETH block number.
     */
    getFinalizedEthHeader(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: { transactionsRoot: string; receiptsRoot: string; 0: string; 1: string };
    }>;

    /**
     * Must check if roots are non-zero.
     * Gets a finalised header.
     * @param _blockNumber : ETH block number.
     */
    'getFinalizedEthHeader(uint256)'(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: { transactionsRoot: string; receiptsRoot: string; 0: string; 1: string };
    }>;

    /**
     * Gets validators of a proposal.
     * @param _ethBlockNumber : ETH block number of the proposal.
     * @param _proposalId : Id of the proposal.
     */
    getProposalValidators(
      _ethBlockNumber: BigNumberish,
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    /**
     * Gets validators of a proposal.
     * @param _ethBlockNumber : ETH block number of the proposal.
     * @param _proposalId : Id of the proposal.
     */
    'getProposalValidators(uint256,uint256)'(
      _ethBlockNumber: BigNumberish,
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    /**
     * Gets number of proposals for the ETH block roots.
     * @param _ethBlockNumber : ETH block number.
     */
    getProposalsCount(
      _ethBlockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Gets number of proposals for the ETH block roots.
     * @param _ethBlockNumber : ETH block number.
     */
    'getProposalsCount(uint256)'(
      _ethBlockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * TODO beta: to be connected with Validator manager
     */
    getValidator(
      _validatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * TODO beta: to be connected with Validator manager
     */
    'getValidator(uint256)'(
      _validatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    isValidator(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    'isValidator(address)'(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    /**
     * The highest ETH finalised block number.
     */
    latestBlockNumber(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * The highest ETH finalised block number.
     */
    'latestBlockNumber()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Returns the address of the current owner.
     */
    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the address of the current owner.
     */
    'owner()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Used by Kami to propose a block.
     * @param _ethBlockNumber : ETH block number.
     * @param _receiptsRoot : ETH block receipts root.
     * @param _transactionsRoot : ETH block transactions root.
     */
    proposeBlock(
      _ethBlockNumber: BigNumberish,
      _transactionsRoot: BytesLike,
      _receiptsRoot: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Used by Kami to propose a block.
     * @param _ethBlockNumber : ETH block number.
     * @param _receiptsRoot : ETH block receipts root.
     * @param _transactionsRoot : ETH block transactions root.
     */
    'proposeBlock(uint256,bytes32,bytes32)'(
      _ethBlockNumber: BigNumberish,
      _transactionsRoot: BytesLike,
      _receiptsRoot: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setInitialValues(
      _startBlockNumber: BigNumberish,
      _validators: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'setInitialValues(uint256,address[])'(
      _startBlockNumber: BigNumberish,
      _validators: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setValidators(_validators: string[], overrides?: Overrides): Promise<ContractTransaction>;

    'setValidators(address[])'(
      _validators: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(newOwner: string, overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  /**
   * Finalizes a proposal on which consensus is acheived.
   * @param _ethBlockNumber ETH block number of the proposal.
   * @param _proposalId Proposal Id of the proposal.
   */
  finalizeProposal(
    _ethBlockNumber: BigNumberish,
    _proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Finalizes a proposal on which consensus is acheived.
   * @param _ethBlockNumber ETH block number of the proposal.
   * @param _proposalId Proposal Id of the proposal.
   */
  'finalizeProposal(uint256,uint256)'(
    _ethBlockNumber: BigNumberish,
    _proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Finds if same proposal is already created
   * @param _ethBlockNumber : ETH block number.
   * @param _receiptsRoot : MPT receipts root
   * @param _transactionsRoot : MPT transactions root
   */
  findProposal(
    _ethBlockNumber: BigNumberish,
    _transactionsRoot: BytesLike,
    _receiptsRoot: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    0: boolean;
    1: BigNumber;
  }>;

  /**
   * Finds if same proposal is already created
   * @param _ethBlockNumber : ETH block number.
   * @param _receiptsRoot : MPT receipts root
   * @param _transactionsRoot : MPT transactions root
   */
  'findProposal(uint256,bytes32,bytes32)'(
    _ethBlockNumber: BigNumberish,
    _transactionsRoot: BytesLike,
    _receiptsRoot: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    0: boolean;
    1: BigNumber;
  }>;

  getAllValidators(overrides?: CallOverrides): Promise<string[]>;

  'getAllValidators()'(overrides?: CallOverrides): Promise<string[]>;

  /**
   * Gets a block proposal.
   * @param _ethBlockNumber : ETH block number.
   * @param _proposalId : Id of the proposal.
   */
  getEthHeaderProposal(
    _ethBlockNumber: BigNumberish,
    _proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    transactionsRoot: string;
    receiptsRoot: string;
    proposalValidators: string[];
    0: string;
    1: string;
    2: string[];
  }>;

  /**
   * Gets a block proposal.
   * @param _ethBlockNumber : ETH block number.
   * @param _proposalId : Id of the proposal.
   */
  'getEthHeaderProposal(uint256,uint256)'(
    _ethBlockNumber: BigNumberish,
    _proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    transactionsRoot: string;
    receiptsRoot: string;
    proposalValidators: string[];
    0: string;
    1: string;
    2: string[];
  }>;

  /**
   * Gets all proposals for an ETH block.
   * @param _ethBlockNumber : ETH block number.
   */
  getEthHeaderProposals(
    _ethBlockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      transactionsRoot: string;
      receiptsRoot: string;
      proposalValidators: string[];
      0: string;
      1: string;
      2: string[];
    }[]
  >;

  /**
   * Gets all proposals for an ETH block.
   * @param _ethBlockNumber : ETH block number.
   */
  'getEthHeaderProposals(uint256)'(
    _ethBlockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      transactionsRoot: string;
      receiptsRoot: string;
      proposalValidators: string[];
      0: string;
      1: string;
      2: string[];
    }[]
  >;

  /**
   * Must check if roots are non-zero.
   * Gets a finalised header.
   * @param _blockNumber : ETH block number.
   */
  getFinalizedEthHeader(
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    transactionsRoot: string;
    receiptsRoot: string;
    0: string;
    1: string;
  }>;

  /**
   * Must check if roots are non-zero.
   * Gets a finalised header.
   * @param _blockNumber : ETH block number.
   */
  'getFinalizedEthHeader(uint256)'(
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    transactionsRoot: string;
    receiptsRoot: string;
    0: string;
    1: string;
  }>;

  /**
   * Gets validators of a proposal.
   * @param _ethBlockNumber : ETH block number of the proposal.
   * @param _proposalId : Id of the proposal.
   */
  getProposalValidators(
    _ethBlockNumber: BigNumberish,
    _proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  /**
   * Gets validators of a proposal.
   * @param _ethBlockNumber : ETH block number of the proposal.
   * @param _proposalId : Id of the proposal.
   */
  'getProposalValidators(uint256,uint256)'(
    _ethBlockNumber: BigNumberish,
    _proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  /**
   * Gets number of proposals for the ETH block roots.
   * @param _ethBlockNumber : ETH block number.
   */
  getProposalsCount(_ethBlockNumber: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Gets number of proposals for the ETH block roots.
   * @param _ethBlockNumber : ETH block number.
   */
  'getProposalsCount(uint256)'(
    _ethBlockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * TODO beta: to be connected with Validator manager
   */
  getValidator(_validatorIndex: BigNumberish, overrides?: CallOverrides): Promise<string>;

  /**
   * TODO beta: to be connected with Validator manager
   */
  'getValidator(uint256)'(
    _validatorIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isValidator(_validator: string, overrides?: CallOverrides): Promise<boolean>;

  'isValidator(address)'(_validator: string, overrides?: CallOverrides): Promise<boolean>;

  /**
   * The highest ETH finalised block number.
   */
  latestBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * The highest ETH finalised block number.
   */
  'latestBlockNumber()'(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  'owner()'(overrides?: CallOverrides): Promise<string>;

  /**
   * Used by Kami to propose a block.
   * @param _ethBlockNumber : ETH block number.
   * @param _receiptsRoot : ETH block receipts root.
   * @param _transactionsRoot : ETH block transactions root.
   */
  proposeBlock(
    _ethBlockNumber: BigNumberish,
    _transactionsRoot: BytesLike,
    _receiptsRoot: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Used by Kami to propose a block.
   * @param _ethBlockNumber : ETH block number.
   * @param _receiptsRoot : ETH block receipts root.
   * @param _transactionsRoot : ETH block transactions root.
   */
  'proposeBlock(uint256,bytes32,bytes32)'(
    _ethBlockNumber: BigNumberish,
    _transactionsRoot: BytesLike,
    _receiptsRoot: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setInitialValues(
    _startBlockNumber: BigNumberish,
    _validators: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'setInitialValues(uint256,address[])'(
    _startBlockNumber: BigNumberish,
    _validators: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setValidators(_validators: string[], overrides?: Overrides): Promise<ContractTransaction>;

  'setValidators(address[])'(
    _validators: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(newOwner: string, overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  'transferOwnership(address)'(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Finalizes a proposal on which consensus is acheived.
     * @param _ethBlockNumber ETH block number of the proposal.
     * @param _proposalId Proposal Id of the proposal.
     */
    finalizeProposal(
      _ethBlockNumber: BigNumberish,
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Finalizes a proposal on which consensus is acheived.
     * @param _ethBlockNumber ETH block number of the proposal.
     * @param _proposalId Proposal Id of the proposal.
     */
    'finalizeProposal(uint256,uint256)'(
      _ethBlockNumber: BigNumberish,
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Finds if same proposal is already created
     * @param _ethBlockNumber : ETH block number.
     * @param _receiptsRoot : MPT receipts root
     * @param _transactionsRoot : MPT transactions root
     */
    findProposal(
      _ethBlockNumber: BigNumberish,
      _transactionsRoot: BytesLike,
      _receiptsRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
      1: BigNumber;
    }>;

    /**
     * Finds if same proposal is already created
     * @param _ethBlockNumber : ETH block number.
     * @param _receiptsRoot : MPT receipts root
     * @param _transactionsRoot : MPT transactions root
     */
    'findProposal(uint256,bytes32,bytes32)'(
      _ethBlockNumber: BigNumberish,
      _transactionsRoot: BytesLike,
      _receiptsRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
      1: BigNumber;
    }>;

    getAllValidators(overrides?: CallOverrides): Promise<string[]>;

    'getAllValidators()'(overrides?: CallOverrides): Promise<string[]>;

    /**
     * Gets a block proposal.
     * @param _ethBlockNumber : ETH block number.
     * @param _proposalId : Id of the proposal.
     */
    getEthHeaderProposal(
      _ethBlockNumber: BigNumberish,
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      transactionsRoot: string;
      receiptsRoot: string;
      proposalValidators: string[];
      0: string;
      1: string;
      2: string[];
    }>;

    /**
     * Gets a block proposal.
     * @param _ethBlockNumber : ETH block number.
     * @param _proposalId : Id of the proposal.
     */
    'getEthHeaderProposal(uint256,uint256)'(
      _ethBlockNumber: BigNumberish,
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      transactionsRoot: string;
      receiptsRoot: string;
      proposalValidators: string[];
      0: string;
      1: string;
      2: string[];
    }>;

    /**
     * Gets all proposals for an ETH block.
     * @param _ethBlockNumber : ETH block number.
     */
    getEthHeaderProposals(
      _ethBlockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        transactionsRoot: string;
        receiptsRoot: string;
        proposalValidators: string[];
        0: string;
        1: string;
        2: string[];
      }[]
    >;

    /**
     * Gets all proposals for an ETH block.
     * @param _ethBlockNumber : ETH block number.
     */
    'getEthHeaderProposals(uint256)'(
      _ethBlockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        transactionsRoot: string;
        receiptsRoot: string;
        proposalValidators: string[];
        0: string;
        1: string;
        2: string[];
      }[]
    >;

    /**
     * Must check if roots are non-zero.
     * Gets a finalised header.
     * @param _blockNumber : ETH block number.
     */
    getFinalizedEthHeader(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      transactionsRoot: string;
      receiptsRoot: string;
      0: string;
      1: string;
    }>;

    /**
     * Must check if roots are non-zero.
     * Gets a finalised header.
     * @param _blockNumber : ETH block number.
     */
    'getFinalizedEthHeader(uint256)'(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      transactionsRoot: string;
      receiptsRoot: string;
      0: string;
      1: string;
    }>;

    /**
     * Gets validators of a proposal.
     * @param _ethBlockNumber : ETH block number of the proposal.
     * @param _proposalId : Id of the proposal.
     */
    getProposalValidators(
      _ethBlockNumber: BigNumberish,
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    /**
     * Gets validators of a proposal.
     * @param _ethBlockNumber : ETH block number of the proposal.
     * @param _proposalId : Id of the proposal.
     */
    'getProposalValidators(uint256,uint256)'(
      _ethBlockNumber: BigNumberish,
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    /**
     * Gets number of proposals for the ETH block roots.
     * @param _ethBlockNumber : ETH block number.
     */
    getProposalsCount(_ethBlockNumber: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets number of proposals for the ETH block roots.
     * @param _ethBlockNumber : ETH block number.
     */
    'getProposalsCount(uint256)'(
      _ethBlockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * TODO beta: to be connected with Validator manager
     */
    getValidator(_validatorIndex: BigNumberish, overrides?: CallOverrides): Promise<string>;

    /**
     * TODO beta: to be connected with Validator manager
     */
    'getValidator(uint256)'(
      _validatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isValidator(_validator: string, overrides?: CallOverrides): Promise<boolean>;

    'isValidator(address)'(_validator: string, overrides?: CallOverrides): Promise<boolean>;

    /**
     * The highest ETH finalised block number.
     */
    latestBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The highest ETH finalised block number.
     */
    'latestBlockNumber()'(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    'owner()'(overrides?: CallOverrides): Promise<string>;

    /**
     * Used by Kami to propose a block.
     * @param _ethBlockNumber : ETH block number.
     * @param _receiptsRoot : ETH block receipts root.
     * @param _transactionsRoot : ETH block transactions root.
     */
    proposeBlock(
      _ethBlockNumber: BigNumberish,
      _transactionsRoot: BytesLike,
      _receiptsRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Used by Kami to propose a block.
     * @param _ethBlockNumber : ETH block number.
     * @param _receiptsRoot : ETH block receipts root.
     * @param _transactionsRoot : ETH block transactions root.
     */
    'proposeBlock(uint256,bytes32,bytes32)'(
      _ethBlockNumber: BigNumberish,
      _transactionsRoot: BytesLike,
      _receiptsRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setInitialValues(
      _startBlockNumber: BigNumberish,
      _validators: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    'setInitialValues(uint256,address[])'(
      _startBlockNumber: BigNumberish,
      _validators: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setValidators(_validators: string[], overrides?: CallOverrides): Promise<void>;

    'setValidators(address[])'(_validators: string[], overrides?: CallOverrides): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    'transferOwnership(address)'(newOwner: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    NewBlockHeader(blockNumber: null, proposalId: null): EventFilter;

    OwnershipTransferred(previousOwner: string | null, newOwner: string | null): EventFilter;
  };

  estimateGas: {
    /**
     * Finalizes a proposal on which consensus is acheived.
     * @param _ethBlockNumber ETH block number of the proposal.
     * @param _proposalId Proposal Id of the proposal.
     */
    finalizeProposal(
      _ethBlockNumber: BigNumberish,
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Finalizes a proposal on which consensus is acheived.
     * @param _ethBlockNumber ETH block number of the proposal.
     * @param _proposalId Proposal Id of the proposal.
     */
    'finalizeProposal(uint256,uint256)'(
      _ethBlockNumber: BigNumberish,
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Finds if same proposal is already created
     * @param _ethBlockNumber : ETH block number.
     * @param _receiptsRoot : MPT receipts root
     * @param _transactionsRoot : MPT transactions root
     */
    findProposal(
      _ethBlockNumber: BigNumberish,
      _transactionsRoot: BytesLike,
      _receiptsRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Finds if same proposal is already created
     * @param _ethBlockNumber : ETH block number.
     * @param _receiptsRoot : MPT receipts root
     * @param _transactionsRoot : MPT transactions root
     */
    'findProposal(uint256,bytes32,bytes32)'(
      _ethBlockNumber: BigNumberish,
      _transactionsRoot: BytesLike,
      _receiptsRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllValidators(overrides?: CallOverrides): Promise<BigNumber>;

    'getAllValidators()'(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets a block proposal.
     * @param _ethBlockNumber : ETH block number.
     * @param _proposalId : Id of the proposal.
     */
    getEthHeaderProposal(
      _ethBlockNumber: BigNumberish,
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets a block proposal.
     * @param _ethBlockNumber : ETH block number.
     * @param _proposalId : Id of the proposal.
     */
    'getEthHeaderProposal(uint256,uint256)'(
      _ethBlockNumber: BigNumberish,
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets all proposals for an ETH block.
     * @param _ethBlockNumber : ETH block number.
     */
    getEthHeaderProposals(
      _ethBlockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets all proposals for an ETH block.
     * @param _ethBlockNumber : ETH block number.
     */
    'getEthHeaderProposals(uint256)'(
      _ethBlockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Must check if roots are non-zero.
     * Gets a finalised header.
     * @param _blockNumber : ETH block number.
     */
    getFinalizedEthHeader(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Must check if roots are non-zero.
     * Gets a finalised header.
     * @param _blockNumber : ETH block number.
     */
    'getFinalizedEthHeader(uint256)'(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets validators of a proposal.
     * @param _ethBlockNumber : ETH block number of the proposal.
     * @param _proposalId : Id of the proposal.
     */
    getProposalValidators(
      _ethBlockNumber: BigNumberish,
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets validators of a proposal.
     * @param _ethBlockNumber : ETH block number of the proposal.
     * @param _proposalId : Id of the proposal.
     */
    'getProposalValidators(uint256,uint256)'(
      _ethBlockNumber: BigNumberish,
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets number of proposals for the ETH block roots.
     * @param _ethBlockNumber : ETH block number.
     */
    getProposalsCount(_ethBlockNumber: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets number of proposals for the ETH block roots.
     * @param _ethBlockNumber : ETH block number.
     */
    'getProposalsCount(uint256)'(
      _ethBlockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * TODO beta: to be connected with Validator manager
     */
    getValidator(_validatorIndex: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * TODO beta: to be connected with Validator manager
     */
    'getValidator(uint256)'(
      _validatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidator(_validator: string, overrides?: CallOverrides): Promise<BigNumber>;

    'isValidator(address)'(_validator: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The highest ETH finalised block number.
     */
    latestBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The highest ETH finalised block number.
     */
    'latestBlockNumber()'(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    'owner()'(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Used by Kami to propose a block.
     * @param _ethBlockNumber : ETH block number.
     * @param _receiptsRoot : ETH block receipts root.
     * @param _transactionsRoot : ETH block transactions root.
     */
    proposeBlock(
      _ethBlockNumber: BigNumberish,
      _transactionsRoot: BytesLike,
      _receiptsRoot: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Used by Kami to propose a block.
     * @param _ethBlockNumber : ETH block number.
     * @param _receiptsRoot : ETH block receipts root.
     * @param _transactionsRoot : ETH block transactions root.
     */
    'proposeBlock(uint256,bytes32,bytes32)'(
      _ethBlockNumber: BigNumberish,
      _transactionsRoot: BytesLike,
      _receiptsRoot: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setInitialValues(
      _startBlockNumber: BigNumberish,
      _validators: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    'setInitialValues(uint256,address[])'(
      _startBlockNumber: BigNumberish,
      _validators: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setValidators(_validators: string[], overrides?: Overrides): Promise<BigNumber>;

    'setValidators(address[])'(_validators: string[], overrides?: Overrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(newOwner: string, overrides?: Overrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    'transferOwnership(address)'(newOwner: string, overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Finalizes a proposal on which consensus is acheived.
     * @param _ethBlockNumber ETH block number of the proposal.
     * @param _proposalId Proposal Id of the proposal.
     */
    finalizeProposal(
      _ethBlockNumber: BigNumberish,
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Finalizes a proposal on which consensus is acheived.
     * @param _ethBlockNumber ETH block number of the proposal.
     * @param _proposalId Proposal Id of the proposal.
     */
    'finalizeProposal(uint256,uint256)'(
      _ethBlockNumber: BigNumberish,
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Finds if same proposal is already created
     * @param _ethBlockNumber : ETH block number.
     * @param _receiptsRoot : MPT receipts root
     * @param _transactionsRoot : MPT transactions root
     */
    findProposal(
      _ethBlockNumber: BigNumberish,
      _transactionsRoot: BytesLike,
      _receiptsRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Finds if same proposal is already created
     * @param _ethBlockNumber : ETH block number.
     * @param _receiptsRoot : MPT receipts root
     * @param _transactionsRoot : MPT transactions root
     */
    'findProposal(uint256,bytes32,bytes32)'(
      _ethBlockNumber: BigNumberish,
      _transactionsRoot: BytesLike,
      _receiptsRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllValidators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getAllValidators()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets a block proposal.
     * @param _ethBlockNumber : ETH block number.
     * @param _proposalId : Id of the proposal.
     */
    getEthHeaderProposal(
      _ethBlockNumber: BigNumberish,
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets a block proposal.
     * @param _ethBlockNumber : ETH block number.
     * @param _proposalId : Id of the proposal.
     */
    'getEthHeaderProposal(uint256,uint256)'(
      _ethBlockNumber: BigNumberish,
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets all proposals for an ETH block.
     * @param _ethBlockNumber : ETH block number.
     */
    getEthHeaderProposals(
      _ethBlockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets all proposals for an ETH block.
     * @param _ethBlockNumber : ETH block number.
     */
    'getEthHeaderProposals(uint256)'(
      _ethBlockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Must check if roots are non-zero.
     * Gets a finalised header.
     * @param _blockNumber : ETH block number.
     */
    getFinalizedEthHeader(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Must check if roots are non-zero.
     * Gets a finalised header.
     * @param _blockNumber : ETH block number.
     */
    'getFinalizedEthHeader(uint256)'(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets validators of a proposal.
     * @param _ethBlockNumber : ETH block number of the proposal.
     * @param _proposalId : Id of the proposal.
     */
    getProposalValidators(
      _ethBlockNumber: BigNumberish,
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets validators of a proposal.
     * @param _ethBlockNumber : ETH block number of the proposal.
     * @param _proposalId : Id of the proposal.
     */
    'getProposalValidators(uint256,uint256)'(
      _ethBlockNumber: BigNumberish,
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets number of proposals for the ETH block roots.
     * @param _ethBlockNumber : ETH block number.
     */
    getProposalsCount(
      _ethBlockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets number of proposals for the ETH block roots.
     * @param _ethBlockNumber : ETH block number.
     */
    'getProposalsCount(uint256)'(
      _ethBlockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * TODO beta: to be connected with Validator manager
     */
    getValidator(
      _validatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * TODO beta: to be connected with Validator manager
     */
    'getValidator(uint256)'(
      _validatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidator(_validator: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'isValidator(address)'(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * The highest ETH finalised block number.
     */
    latestBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The highest ETH finalised block number.
     */
    'latestBlockNumber()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Used by Kami to propose a block.
     * @param _ethBlockNumber : ETH block number.
     * @param _receiptsRoot : ETH block receipts root.
     * @param _transactionsRoot : ETH block transactions root.
     */
    proposeBlock(
      _ethBlockNumber: BigNumberish,
      _transactionsRoot: BytesLike,
      _receiptsRoot: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Used by Kami to propose a block.
     * @param _ethBlockNumber : ETH block number.
     * @param _receiptsRoot : ETH block receipts root.
     * @param _transactionsRoot : ETH block transactions root.
     */
    'proposeBlock(uint256,bytes32,bytes32)'(
      _ethBlockNumber: BigNumberish,
      _transactionsRoot: BytesLike,
      _receiptsRoot: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setInitialValues(
      _startBlockNumber: BigNumberish,
      _validators: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'setInitialValues(uint256,address[])'(
      _startBlockNumber: BigNumberish,
      _validators: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setValidators(_validators: string[], overrides?: Overrides): Promise<PopulatedTransaction>;

    'setValidators(address[])'(
      _validators: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(newOwner: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
