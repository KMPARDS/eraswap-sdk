/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers';
import {
  Contract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

interface InrtReceiverInterface extends ethers.utils.Interface {
  functions: {
    'getMonthlyNRT(uint32)': FunctionFragment;
    'receiveNrt(uint32)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'getMonthlyNRT', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'receiveNrt', values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'getMonthlyNRT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'receiveNrt', data: BytesLike): Result;

  events: {};
}

export abstract class InrtReceiver extends Contract {
  abstract connect(signerOrProvider: Signer | Provider | string): this;
  abstract attach(addressOrName: string): this;
  abstract deployed(): Promise<this>;

  abstract on(event: EventFilter | string, listener: Listener): this;
  abstract once(event: EventFilter | string, listener: Listener): this;
  abstract addListener(eventName: EventFilter | string, listener: Listener): this;
  abstract removeAllListeners(eventName: EventFilter | string): this;
  abstract removeListener(eventName: any, listener: Listener): this;

  abstract interface: InrtReceiverInterface;

  abstract functions: {
    getMonthlyNRT(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'getMonthlyNRT(uint32)'(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    receiveNrt(
      _currentNrtMonth: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    'receiveNrt(uint32)'(
      _currentNrtMonth: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;
  };

  abstract getMonthlyNRT(_month: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  abstract 'getMonthlyNRT(uint32)'(
    _month: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  abstract receiveNrt(
    _currentNrtMonth: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  abstract 'receiveNrt(uint32)'(
    _currentNrtMonth: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  abstract callStatic: {
    getMonthlyNRT(_month: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'getMonthlyNRT(uint32)'(_month: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    receiveNrt(_currentNrtMonth: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'receiveNrt(uint32)'(_currentNrtMonth: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  abstract filters: {};

  abstract estimateGas: {
    getMonthlyNRT(_month: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'getMonthlyNRT(uint32)'(_month: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    receiveNrt(_currentNrtMonth: BigNumberish, overrides?: PayableOverrides): Promise<BigNumber>;

    'receiveNrt(uint32)'(
      _currentNrtMonth: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;
  };

  abstract populateTransaction: {
    getMonthlyNRT(_month: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getMonthlyNRT(uint32)'(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receiveNrt(
      _currentNrtMonth: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    'receiveNrt(uint32)'(
      _currentNrtMonth: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;
  };
}
