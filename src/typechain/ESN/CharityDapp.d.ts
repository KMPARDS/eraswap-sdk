/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface CharityDappInterface extends ethers.utils.Interface {
  functions: {
    "Admin(address)": FunctionFragment;
    "CharityPool(bytes32,uint256)": FunctionFragment;
    "Support(bytes32)": FunctionFragment;
    "addComments(bytes32,string)": FunctionFragment;
    "addToCharityPool()": FunctionFragment;
    "approveProposal(bytes32)": FunctionFragment;
    "campaigns(bytes32)": FunctionFragment;
    "claimFunds(bytes32)": FunctionFragment;
    "dayswappers()": FunctionFragment;
    "donate(bytes32)": FunctionFragment;
    "donateToCharityPool()": FunctionFragment;
    "getCharityPool()": FunctionFragment;
    "kycDapp()": FunctionFragment;
    "newCampaign(string,string,uint256,bool,uint256)": FunctionFragment;
    "nrtManager()": FunctionFragment;
    "owner()": FunctionFragment;
    "prepaidEs()": FunctionFragment;
    "randomnessManager()": FunctionFragment;
    "removeAdmin(address)": FunctionFragment;
    "resolveAddress(bytes32)": FunctionFragment;
    "resolveAddressStrict(bytes32)": FunctionFragment;
    "resolveUsername(address)": FunctionFragment;
    "resolveUsernameStrict(address)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setKycDapp(address)": FunctionFragment;
    "supportUser(bytes32,address)": FunctionFragment;
    "timeallyClub()": FunctionFragment;
    "timeallyManager()": FunctionFragment;
    "timeallyPromotionalBucket()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "validatorManager()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "Admin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "CharityPool",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "Support", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "addComments",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addToCharityPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveProposal",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "campaigns",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFunds",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "dayswappers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "donate", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "donateToCharityPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCharityPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "kycDapp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "newCampaign",
    values: [string, string, BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nrtManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "prepaidEs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "randomnessManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "removeAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "resolveAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveAddressStrict",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveUsername",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveUsernameStrict",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(functionFragment: "setKycDapp", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportUser",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "timeallyClub",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeallyManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeallyPromotionalBucket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorManager",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "Admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CharityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Support", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addComments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToCharityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "campaigns", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimFunds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dayswappers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "donateToCharityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCharityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kycDapp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nrtManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prepaidEs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "randomnessManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveAddressStrict",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveUsername",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveUsernameStrict",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setKycDapp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeallyClub",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeallyManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeallyPromotionalBucket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorManager",
    data: BytesLike
  ): Result;

  events: {
    "Comments(bytes32,address,string,uint256)": EventFragment;
    "Donated(bytes32,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProposalAdded(bytes32,address)": EventFragment;
    "ProposalAproved(bytes32,uint256,string)": EventFragment;
    "ProposalClaimed(bytes32,uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Comments"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Donated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalAproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalClaimed"): EventFragment;
}

export class CharityDapp extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: CharityDappInterface;

  functions: {
    Admin(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "Admin(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    CharityPool(
      _proposalAddress: BytesLike,
      poolDonation: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "CharityPool(bytes32,uint256)"(
      _proposalAddress: BytesLike,
      poolDonation: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    Support(
      _proposalAddress: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "Support(bytes32)"(
      _proposalAddress: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addComments(
      _proposalAddress: BytesLike,
      message: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addComments(bytes32,string)"(
      _proposalAddress: BytesLike,
      message: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addToCharityPool(
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "addToCharityPool()"(
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    approveProposal(
      _proposalAddress: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approveProposal(bytes32)"(
      _proposalAddress: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    campaigns(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      PraposalHash: string;
      proposalTitle: string;
      Campaigner: string;
      fullExtraction: boolean;
      proposalApproved: boolean;
      fundRaisingDeadline: BigNumber;
      fundingGoal: BigNumber;
      raisedFunds: BigNumber;
      claimedFunds: BigNumber;
      support: BigNumber;
      0: string;
      1: string;
      2: string;
      3: boolean;
      4: boolean;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: BigNumber;
    }>;

    "campaigns(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      PraposalHash: string;
      proposalTitle: string;
      Campaigner: string;
      fullExtraction: boolean;
      proposalApproved: boolean;
      fundRaisingDeadline: BigNumber;
      fundingGoal: BigNumber;
      raisedFunds: BigNumber;
      claimedFunds: BigNumber;
      support: BigNumber;
      0: string;
      1: string;
      2: string;
      3: boolean;
      4: boolean;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: BigNumber;
    }>;

    claimFunds(
      _proposalAddress: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "claimFunds(bytes32)"(
      _proposalAddress: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    dayswappers(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "dayswappers()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    donate(
      _proposalAddress: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "donate(bytes32)"(
      _proposalAddress: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    donateToCharityPool(
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "donateToCharityPool()"(
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    getCharityPool(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getCharityPool()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    kycDapp(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "kycDapp()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    newCampaign(
      ipfsHash: string,
      _title: string,
      _fundingGoal: BigNumberish,
      _fullExtraction: boolean,
      _fundRaisingDeadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "newCampaign(string,string,uint256,bool,uint256)"(
      ipfsHash: string,
      _title: string,
      _fundingGoal: BigNumberish,
      _fullExtraction: boolean,
      _fundRaisingDeadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    nrtManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "nrtManager()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the address of the current owner.
     */
    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    prepaidEs(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "prepaidEs()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    randomnessManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "randomnessManager()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    removeAdmin(
      user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeAdmin(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    resolveAddress(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "resolveAddress(bytes32)"(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    resolveAddressStrict(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "resolveAddressStrict(bytes32)"(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    resolveUsername(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "resolveUsername(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    resolveUsernameStrict(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "resolveUsernameStrict(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setAdmin(user: string, overrides?: Overrides): Promise<ContractTransaction>;

    "setAdmin(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setKycDapp(
      _kycDapp: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setKycDapp(address)"(
      _kycDapp: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportUser(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportUser(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    timeallyClub(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "timeallyClub()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    timeallyManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "timeallyManager()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    timeallyPromotionalBucket(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "timeallyPromotionalBucket()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    validatorManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "validatorManager()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  Admin(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "Admin(address)"(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  CharityPool(
    _proposalAddress: BytesLike,
    poolDonation: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "CharityPool(bytes32,uint256)"(
    _proposalAddress: BytesLike,
    poolDonation: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  Support(
    _proposalAddress: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "Support(bytes32)"(
    _proposalAddress: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addComments(
    _proposalAddress: BytesLike,
    message: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addComments(bytes32,string)"(
    _proposalAddress: BytesLike,
    message: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addToCharityPool(overrides?: PayableOverrides): Promise<ContractTransaction>;

  "addToCharityPool()"(
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  approveProposal(
    _proposalAddress: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approveProposal(bytes32)"(
    _proposalAddress: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  campaigns(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    PraposalHash: string;
    proposalTitle: string;
    Campaigner: string;
    fullExtraction: boolean;
    proposalApproved: boolean;
    fundRaisingDeadline: BigNumber;
    fundingGoal: BigNumber;
    raisedFunds: BigNumber;
    claimedFunds: BigNumber;
    support: BigNumber;
    0: string;
    1: string;
    2: string;
    3: boolean;
    4: boolean;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
    8: BigNumber;
    9: BigNumber;
  }>;

  "campaigns(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    PraposalHash: string;
    proposalTitle: string;
    Campaigner: string;
    fullExtraction: boolean;
    proposalApproved: boolean;
    fundRaisingDeadline: BigNumber;
    fundingGoal: BigNumber;
    raisedFunds: BigNumber;
    claimedFunds: BigNumber;
    support: BigNumber;
    0: string;
    1: string;
    2: string;
    3: boolean;
    4: boolean;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
    8: BigNumber;
    9: BigNumber;
  }>;

  claimFunds(
    _proposalAddress: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "claimFunds(bytes32)"(
    _proposalAddress: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  dayswappers(overrides?: CallOverrides): Promise<string>;

  "dayswappers()"(overrides?: CallOverrides): Promise<string>;

  donate(
    _proposalAddress: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "donate(bytes32)"(
    _proposalAddress: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  donateToCharityPool(
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "donateToCharityPool()"(
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  getCharityPool(overrides?: CallOverrides): Promise<BigNumber>;

  "getCharityPool()"(overrides?: CallOverrides): Promise<BigNumber>;

  kycDapp(overrides?: CallOverrides): Promise<string>;

  "kycDapp()"(overrides?: CallOverrides): Promise<string>;

  newCampaign(
    ipfsHash: string,
    _title: string,
    _fundingGoal: BigNumberish,
    _fullExtraction: boolean,
    _fundRaisingDeadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "newCampaign(string,string,uint256,bool,uint256)"(
    ipfsHash: string,
    _title: string,
    _fundingGoal: BigNumberish,
    _fullExtraction: boolean,
    _fundRaisingDeadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  nrtManager(overrides?: CallOverrides): Promise<string>;

  "nrtManager()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  "owner()"(overrides?: CallOverrides): Promise<string>;

  prepaidEs(overrides?: CallOverrides): Promise<string>;

  "prepaidEs()"(overrides?: CallOverrides): Promise<string>;

  randomnessManager(overrides?: CallOverrides): Promise<string>;

  "randomnessManager()"(overrides?: CallOverrides): Promise<string>;

  removeAdmin(
    user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeAdmin(address)"(
    user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  resolveAddress(
    _username: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "resolveAddress(bytes32)"(
    _username: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  resolveAddressStrict(
    _username: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "resolveAddressStrict(bytes32)"(
    _username: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  resolveUsername(_wallet: string, overrides?: CallOverrides): Promise<string>;

  "resolveUsername(address)"(
    _wallet: string,
    overrides?: CallOverrides
  ): Promise<string>;

  resolveUsernameStrict(
    _wallet: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "resolveUsernameStrict(address)"(
    _wallet: string,
    overrides?: CallOverrides
  ): Promise<string>;

  setAdmin(user: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setAdmin(address)"(
    user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setKycDapp(
    _kycDapp: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setKycDapp(address)"(
    _kycDapp: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportUser(
    arg0: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportUser(bytes32,address)"(
    arg0: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  timeallyClub(overrides?: CallOverrides): Promise<string>;

  "timeallyClub()"(overrides?: CallOverrides): Promise<string>;

  timeallyManager(overrides?: CallOverrides): Promise<string>;

  "timeallyManager()"(overrides?: CallOverrides): Promise<string>;

  timeallyPromotionalBucket(overrides?: CallOverrides): Promise<string>;

  "timeallyPromotionalBucket()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  validatorManager(overrides?: CallOverrides): Promise<string>;

  "validatorManager()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    Admin(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "Admin(address)"(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    CharityPool(
      _proposalAddress: BytesLike,
      poolDonation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "CharityPool(bytes32,uint256)"(
      _proposalAddress: BytesLike,
      poolDonation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    Support(
      _proposalAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "Support(bytes32)"(
      _proposalAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    addComments(
      _proposalAddress: BytesLike,
      message: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addComments(bytes32,string)"(
      _proposalAddress: BytesLike,
      message: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addToCharityPool(overrides?: CallOverrides): Promise<void>;

    "addToCharityPool()"(overrides?: CallOverrides): Promise<void>;

    approveProposal(
      _proposalAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "approveProposal(bytes32)"(
      _proposalAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    campaigns(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      PraposalHash: string;
      proposalTitle: string;
      Campaigner: string;
      fullExtraction: boolean;
      proposalApproved: boolean;
      fundRaisingDeadline: BigNumber;
      fundingGoal: BigNumber;
      raisedFunds: BigNumber;
      claimedFunds: BigNumber;
      support: BigNumber;
      0: string;
      1: string;
      2: string;
      3: boolean;
      4: boolean;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: BigNumber;
    }>;

    "campaigns(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      PraposalHash: string;
      proposalTitle: string;
      Campaigner: string;
      fullExtraction: boolean;
      proposalApproved: boolean;
      fundRaisingDeadline: BigNumber;
      fundingGoal: BigNumber;
      raisedFunds: BigNumber;
      claimedFunds: BigNumber;
      support: BigNumber;
      0: string;
      1: string;
      2: string;
      3: boolean;
      4: boolean;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: BigNumber;
    }>;

    claimFunds(
      _proposalAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimFunds(bytes32)"(
      _proposalAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    dayswappers(overrides?: CallOverrides): Promise<string>;

    "dayswappers()"(overrides?: CallOverrides): Promise<string>;

    donate(
      _proposalAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "donate(bytes32)"(
      _proposalAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    donateToCharityPool(overrides?: CallOverrides): Promise<void>;

    "donateToCharityPool()"(overrides?: CallOverrides): Promise<void>;

    getCharityPool(overrides?: CallOverrides): Promise<BigNumber>;

    "getCharityPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    kycDapp(overrides?: CallOverrides): Promise<string>;

    "kycDapp()"(overrides?: CallOverrides): Promise<string>;

    newCampaign(
      ipfsHash: string,
      _title: string,
      _fundingGoal: BigNumberish,
      _fullExtraction: boolean,
      _fundRaisingDeadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "newCampaign(string,string,uint256,bool,uint256)"(
      ipfsHash: string,
      _title: string,
      _fundingGoal: BigNumberish,
      _fullExtraction: boolean,
      _fundRaisingDeadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    nrtManager(overrides?: CallOverrides): Promise<string>;

    "nrtManager()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<string>;

    prepaidEs(overrides?: CallOverrides): Promise<string>;

    "prepaidEs()"(overrides?: CallOverrides): Promise<string>;

    randomnessManager(overrides?: CallOverrides): Promise<string>;

    "randomnessManager()"(overrides?: CallOverrides): Promise<string>;

    removeAdmin(user: string, overrides?: CallOverrides): Promise<void>;

    "removeAdmin(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    resolveAddress(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "resolveAddress(bytes32)"(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    resolveAddressStrict(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "resolveAddressStrict(bytes32)"(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    resolveUsername(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "resolveUsername(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<string>;

    resolveUsernameStrict(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "resolveUsernameStrict(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<string>;

    setAdmin(user: string, overrides?: CallOverrides): Promise<void>;

    "setAdmin(address)"(user: string, overrides?: CallOverrides): Promise<void>;

    setKycDapp(_kycDapp: string, overrides?: CallOverrides): Promise<void>;

    "setKycDapp(address)"(
      _kycDapp: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportUser(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportUser(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    timeallyClub(overrides?: CallOverrides): Promise<string>;

    "timeallyClub()"(overrides?: CallOverrides): Promise<string>;

    timeallyManager(overrides?: CallOverrides): Promise<string>;

    "timeallyManager()"(overrides?: CallOverrides): Promise<string>;

    timeallyPromotionalBucket(overrides?: CallOverrides): Promise<string>;

    "timeallyPromotionalBucket()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    validatorManager(overrides?: CallOverrides): Promise<string>;

    "validatorManager()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Comments(
      proposalAddress: BytesLike | null,
      Sender: null,
      message: null,
      time: null
    ): EventFilter;

    Donated(
      proposalAddress: BytesLike | null,
      donorAddress: string | null,
      amount: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    ProposalAdded(
      proposalAddress: null,
      _campaigner: string | null
    ): EventFilter;

    ProposalAproved(
      proposalAddress: null,
      amount: null,
      description: null
    ): EventFilter;

    ProposalClaimed(
      proposalAddress: null,
      amount: null,
      description: null
    ): EventFilter;
  };

  estimateGas: {
    Admin(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "Admin(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CharityPool(
      _proposalAddress: BytesLike,
      poolDonation: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "CharityPool(bytes32,uint256)"(
      _proposalAddress: BytesLike,
      poolDonation: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    Support(
      _proposalAddress: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "Support(bytes32)"(
      _proposalAddress: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addComments(
      _proposalAddress: BytesLike,
      message: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addComments(bytes32,string)"(
      _proposalAddress: BytesLike,
      message: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addToCharityPool(overrides?: PayableOverrides): Promise<BigNumber>;

    "addToCharityPool()"(overrides?: PayableOverrides): Promise<BigNumber>;

    approveProposal(
      _proposalAddress: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approveProposal(bytes32)"(
      _proposalAddress: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    campaigns(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "campaigns(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimFunds(
      _proposalAddress: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "claimFunds(bytes32)"(
      _proposalAddress: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    dayswappers(overrides?: CallOverrides): Promise<BigNumber>;

    "dayswappers()"(overrides?: CallOverrides): Promise<BigNumber>;

    donate(
      _proposalAddress: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "donate(bytes32)"(
      _proposalAddress: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    donateToCharityPool(overrides?: PayableOverrides): Promise<BigNumber>;

    "donateToCharityPool()"(overrides?: PayableOverrides): Promise<BigNumber>;

    getCharityPool(overrides?: CallOverrides): Promise<BigNumber>;

    "getCharityPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    kycDapp(overrides?: CallOverrides): Promise<BigNumber>;

    "kycDapp()"(overrides?: CallOverrides): Promise<BigNumber>;

    newCampaign(
      ipfsHash: string,
      _title: string,
      _fundingGoal: BigNumberish,
      _fullExtraction: boolean,
      _fundRaisingDeadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "newCampaign(string,string,uint256,bool,uint256)"(
      ipfsHash: string,
      _title: string,
      _fundingGoal: BigNumberish,
      _fullExtraction: boolean,
      _fundRaisingDeadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    nrtManager(overrides?: CallOverrides): Promise<BigNumber>;

    "nrtManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    prepaidEs(overrides?: CallOverrides): Promise<BigNumber>;

    "prepaidEs()"(overrides?: CallOverrides): Promise<BigNumber>;

    randomnessManager(overrides?: CallOverrides): Promise<BigNumber>;

    "randomnessManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeAdmin(user: string, overrides?: Overrides): Promise<BigNumber>;

    "removeAdmin(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    resolveAddress(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "resolveAddress(bytes32)"(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolveAddressStrict(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "resolveAddressStrict(bytes32)"(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolveUsername(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "resolveUsername(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolveUsernameStrict(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "resolveUsernameStrict(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAdmin(user: string, overrides?: Overrides): Promise<BigNumber>;

    "setAdmin(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setKycDapp(_kycDapp: string, overrides?: Overrides): Promise<BigNumber>;

    "setKycDapp(address)"(
      _kycDapp: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportUser(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportUser(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timeallyClub(overrides?: CallOverrides): Promise<BigNumber>;

    "timeallyClub()"(overrides?: CallOverrides): Promise<BigNumber>;

    timeallyManager(overrides?: CallOverrides): Promise<BigNumber>;

    "timeallyManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    timeallyPromotionalBucket(overrides?: CallOverrides): Promise<BigNumber>;

    "timeallyPromotionalBucket()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    validatorManager(overrides?: CallOverrides): Promise<BigNumber>;

    "validatorManager()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    Admin(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "Admin(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CharityPool(
      _proposalAddress: BytesLike,
      poolDonation: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "CharityPool(bytes32,uint256)"(
      _proposalAddress: BytesLike,
      poolDonation: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    Support(
      _proposalAddress: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "Support(bytes32)"(
      _proposalAddress: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addComments(
      _proposalAddress: BytesLike,
      message: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addComments(bytes32,string)"(
      _proposalAddress: BytesLike,
      message: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addToCharityPool(
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "addToCharityPool()"(
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    approveProposal(
      _proposalAddress: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approveProposal(bytes32)"(
      _proposalAddress: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    campaigns(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "campaigns(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimFunds(
      _proposalAddress: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "claimFunds(bytes32)"(
      _proposalAddress: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    dayswappers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dayswappers()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    donate(
      _proposalAddress: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "donate(bytes32)"(
      _proposalAddress: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    donateToCharityPool(
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "donateToCharityPool()"(
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    getCharityPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getCharityPool()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kycDapp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "kycDapp()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newCampaign(
      ipfsHash: string,
      _title: string,
      _fundingGoal: BigNumberish,
      _fullExtraction: boolean,
      _fundRaisingDeadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "newCampaign(string,string,uint256,bool,uint256)"(
      ipfsHash: string,
      _title: string,
      _fundingGoal: BigNumberish,
      _fullExtraction: boolean,
      _fundRaisingDeadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    nrtManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nrtManager()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prepaidEs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "prepaidEs()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    randomnessManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "randomnessManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeAdmin(
      user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeAdmin(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    resolveAddress(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "resolveAddress(bytes32)"(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolveAddressStrict(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "resolveAddressStrict(bytes32)"(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolveUsername(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "resolveUsername(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolveUsernameStrict(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "resolveUsernameStrict(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAdmin(
      user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAdmin(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setKycDapp(
      _kycDapp: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setKycDapp(address)"(
      _kycDapp: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportUser(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportUser(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timeallyClub(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "timeallyClub()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeallyManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "timeallyManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timeallyPromotionalBucket(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "timeallyPromotionalBucket()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    validatorManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "validatorManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
