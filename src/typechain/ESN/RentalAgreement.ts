/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers';
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

interface RentalAgreementInterface extends ethers.utils.Interface {
  functions: {
    'amt()': FunctionFragment;
    'cancelRent()': FunctionFragment;
    'cancellationFee()': FunctionFragment;
    'check()': FunctionFragment;
    'confirmAgreement()': FunctionFragment;
    'createdTimestamp()': FunctionFragment;
    'finalCheckByLessee(uint48)': FunctionFragment;
    'finalCheckByLessor(uint48)': FunctionFragment;
    'getContractAddress()': FunctionFragment;
    'getContractCreated()': FunctionFragment;
    'getItem()': FunctionFragment;
    'getLessee()': FunctionFragment;
    'getLessor()': FunctionFragment;
    'getPaidRents()': FunctionFragment;
    'getRent()': FunctionFragment;
    'getState()': FunctionFragment;
    'incentive()': FunctionFragment;
    'initialCheck()': FunctionFragment;
    'initialCheckByLessee(uint48)': FunctionFragment;
    'initialCheckByLessor(uint48)': FunctionFragment;
    'item()': FunctionFragment;
    'lessee()': FunctionFragment;
    'lessor()': FunctionFragment;
    'maxRent()': FunctionFragment;
    'paidrents(uint256)': FunctionFragment;
    'payRent()': FunctionFragment;
    'payingRent()': FunctionFragment;
    'possibleRents(uint256)': FunctionFragment;
    'productManager()': FunctionFragment;
    'security()': FunctionFragment;
    'state()': FunctionFragment;
    'terminateNormally()': FunctionFragment;
    'terminateWithAdditionalCharges(uint256)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'amt', values?: undefined): string;
  encodeFunctionData(functionFragment: 'cancelRent', values?: undefined): string;
  encodeFunctionData(functionFragment: 'cancellationFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'check', values?: undefined): string;
  encodeFunctionData(functionFragment: 'confirmAgreement', values?: undefined): string;
  encodeFunctionData(functionFragment: 'createdTimestamp', values?: undefined): string;
  encodeFunctionData(functionFragment: 'finalCheckByLessee', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'finalCheckByLessor', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getContractAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getContractCreated', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getItem', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getLessee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getLessor', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPaidRents', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getRent', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getState', values?: undefined): string;
  encodeFunctionData(functionFragment: 'incentive', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initialCheck', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initialCheckByLessee', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'initialCheckByLessor', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'item', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lessee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lessor', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxRent', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paidrents', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'payRent', values?: undefined): string;
  encodeFunctionData(functionFragment: 'payingRent', values?: undefined): string;
  encodeFunctionData(functionFragment: 'possibleRents', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'productManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'security', values?: undefined): string;
  encodeFunctionData(functionFragment: 'state', values?: undefined): string;
  encodeFunctionData(functionFragment: 'terminateNormally', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'terminateWithAdditionalCharges',
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: 'amt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cancelRent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cancellationFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'check', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'confirmAgreement', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createdTimestamp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'finalCheckByLessee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'finalCheckByLessor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getContractAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getContractCreated', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getItem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLessee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLessor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPaidRents', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getState', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'incentive', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialCheck', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialCheckByLessee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialCheckByLessor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'item', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lessee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lessor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxRent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paidrents', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'payRent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'payingRent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'possibleRents', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'productManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'security', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'state', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'terminateNormally', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'terminateWithAdditionalCharges', data: BytesLike): Result;

  events: {
    'agreementConfirmed()': EventFragment;
    'checked(uint8)': EventFragment;
    'contractTerminated()': EventFragment;
    'paidRent()': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'agreementConfirmed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'checked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'contractTerminated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'paidRent'): EventFragment;
}

export abstract class RentalAgreement extends Contract {
  abstract connect(signerOrProvider: Signer | Provider | string): this;
  abstract attach(addressOrName: string): this;
  abstract deployed(): Promise<this>;

  abstract on(event: EventFilter | string, listener: Listener): this;
  abstract once(event: EventFilter | string, listener: Listener): this;
  abstract addListener(eventName: EventFilter | string, listener: Listener): this;
  abstract removeAllListeners(eventName: EventFilter | string): this;
  abstract removeListener(eventName: any, listener: Listener): this;

  abstract interface: RentalAgreementInterface;

  abstract functions: {
    amt(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'amt()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    cancelRent(overrides?: PayableOverrides): Promise<ContractTransaction>;

    'cancelRent()'(overrides?: PayableOverrides): Promise<ContractTransaction>;

    cancellationFee(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'cancellationFee()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    check(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    'check()'(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    confirmAgreement(overrides?: Overrides): Promise<ContractTransaction>;

    'confirmAgreement()'(overrides?: Overrides): Promise<ContractTransaction>;

    createdTimestamp(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'createdTimestamp()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    finalCheckByLessee(
      _condition: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'finalCheckByLessee(uint48)'(
      _condition: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    finalCheckByLessor(
      _condition: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'finalCheckByLessor(uint48)'(
      _condition: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getContractAddress(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'getContractAddress()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getContractCreated(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'getContractCreated()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getItem(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'getItem()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getLessee(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'getLessee()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getLessor(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'getLessor()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getPaidRents(
      overrides?: CallOverrides
    ): Promise<{
      0: { id: BigNumber; value: BigNumber; 0: BigNumber; 1: BigNumber }[];
    }>;

    'getPaidRents()'(
      overrides?: CallOverrides
    ): Promise<{
      0: { id: BigNumber; value: BigNumber; 0: BigNumber; 1: BigNumber }[];
    }>;

    getRent(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'getRent()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getState(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    'getState()'(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    incentive(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'incentive()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    initialCheck(overrides?: PayableOverrides): Promise<ContractTransaction>;

    'initialCheck()'(overrides?: PayableOverrides): Promise<ContractTransaction>;

    initialCheckByLessee(
      _condition: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    'initialCheckByLessee(uint48)'(
      _condition: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    initialCheckByLessor(
      _condition: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'initialCheckByLessor(uint48)'(
      _condition: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    item(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'item()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    lessee(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'lessee()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    lessor(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'lessor()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    maxRent(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'maxRent()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    paidrents(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      value: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    'paidrents(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      value: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    payRent(overrides?: PayableOverrides): Promise<ContractTransaction>;

    'payRent()'(overrides?: PayableOverrides): Promise<ContractTransaction>;

    payingRent(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'payingRent()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    possibleRents(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'possibleRents(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    productManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'productManager()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    security(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'security()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    state(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    'state()'(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    terminateNormally(overrides?: PayableOverrides): Promise<ContractTransaction>;

    'terminateNormally()'(overrides?: PayableOverrides): Promise<ContractTransaction>;

    terminateWithAdditionalCharges(
      additionalCharges: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    'terminateWithAdditionalCharges(uint256)'(
      additionalCharges: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;
  };

  abstract amt(overrides?: CallOverrides): Promise<BigNumber>;

  abstract 'amt()'(overrides?: CallOverrides): Promise<BigNumber>;

  abstract cancelRent(overrides?: PayableOverrides): Promise<ContractTransaction>;

  abstract 'cancelRent()'(overrides?: PayableOverrides): Promise<ContractTransaction>;

  abstract cancellationFee(overrides?: CallOverrides): Promise<BigNumber>;

  abstract 'cancellationFee()'(overrides?: CallOverrides): Promise<BigNumber>;

  abstract check(overrides?: CallOverrides): Promise<number>;

  abstract 'check()'(overrides?: CallOverrides): Promise<number>;

  abstract confirmAgreement(overrides?: Overrides): Promise<ContractTransaction>;

  abstract 'confirmAgreement()'(overrides?: Overrides): Promise<ContractTransaction>;

  abstract createdTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  abstract 'createdTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>;

  abstract finalCheckByLessee(
    _condition: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  abstract 'finalCheckByLessee(uint48)'(
    _condition: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  abstract finalCheckByLessor(
    _condition: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  abstract 'finalCheckByLessor(uint48)'(
    _condition: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  abstract getContractAddress(overrides?: CallOverrides): Promise<string>;

  abstract 'getContractAddress()'(overrides?: CallOverrides): Promise<string>;

  abstract getContractCreated(overrides?: CallOverrides): Promise<BigNumber>;

  abstract 'getContractCreated()'(overrides?: CallOverrides): Promise<BigNumber>;

  abstract getItem(overrides?: CallOverrides): Promise<string>;

  abstract 'getItem()'(overrides?: CallOverrides): Promise<string>;

  abstract getLessee(overrides?: CallOverrides): Promise<string>;

  abstract 'getLessee()'(overrides?: CallOverrides): Promise<string>;

  abstract getLessor(overrides?: CallOverrides): Promise<string>;

  abstract 'getLessor()'(overrides?: CallOverrides): Promise<string>;

  abstract getPaidRents(
    overrides?: CallOverrides
  ): Promise<{ id: BigNumber; value: BigNumber; 0: BigNumber; 1: BigNumber }[]>;

  abstract 'getPaidRents()'(
    overrides?: CallOverrides
  ): Promise<{ id: BigNumber; value: BigNumber; 0: BigNumber; 1: BigNumber }[]>;

  abstract getRent(overrides?: CallOverrides): Promise<BigNumber>;

  abstract 'getRent()'(overrides?: CallOverrides): Promise<BigNumber>;

  abstract getState(overrides?: CallOverrides): Promise<number>;

  abstract 'getState()'(overrides?: CallOverrides): Promise<number>;

  abstract incentive(overrides?: CallOverrides): Promise<BigNumber>;

  abstract 'incentive()'(overrides?: CallOverrides): Promise<BigNumber>;

  abstract initialCheck(overrides?: PayableOverrides): Promise<ContractTransaction>;

  abstract 'initialCheck()'(overrides?: PayableOverrides): Promise<ContractTransaction>;

  abstract initialCheckByLessee(
    _condition: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  abstract 'initialCheckByLessee(uint48)'(
    _condition: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  abstract initialCheckByLessor(
    _condition: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  abstract 'initialCheckByLessor(uint48)'(
    _condition: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  abstract item(overrides?: CallOverrides): Promise<string>;

  abstract 'item()'(overrides?: CallOverrides): Promise<string>;

  abstract lessee(overrides?: CallOverrides): Promise<string>;

  abstract 'lessee()'(overrides?: CallOverrides): Promise<string>;

  abstract lessor(overrides?: CallOverrides): Promise<string>;

  abstract 'lessor()'(overrides?: CallOverrides): Promise<string>;

  abstract maxRent(overrides?: CallOverrides): Promise<BigNumber>;

  abstract 'maxRent()'(overrides?: CallOverrides): Promise<BigNumber>;

  abstract paidrents(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    value: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  abstract 'paidrents(uint256)'(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    value: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  abstract payRent(overrides?: PayableOverrides): Promise<ContractTransaction>;

  abstract 'payRent()'(overrides?: PayableOverrides): Promise<ContractTransaction>;

  abstract payingRent(overrides?: CallOverrides): Promise<BigNumber>;

  abstract 'payingRent()'(overrides?: CallOverrides): Promise<BigNumber>;

  abstract possibleRents(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  abstract 'possibleRents(uint256)'(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  abstract productManager(overrides?: CallOverrides): Promise<string>;

  abstract 'productManager()'(overrides?: CallOverrides): Promise<string>;

  abstract security(overrides?: CallOverrides): Promise<BigNumber>;

  abstract 'security()'(overrides?: CallOverrides): Promise<BigNumber>;

  abstract state(overrides?: CallOverrides): Promise<number>;

  abstract 'state()'(overrides?: CallOverrides): Promise<number>;

  abstract terminateNormally(overrides?: PayableOverrides): Promise<ContractTransaction>;

  abstract 'terminateNormally()'(overrides?: PayableOverrides): Promise<ContractTransaction>;

  abstract terminateWithAdditionalCharges(
    additionalCharges: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  abstract 'terminateWithAdditionalCharges(uint256)'(
    additionalCharges: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  abstract callStatic: {
    amt(overrides?: CallOverrides): Promise<BigNumber>;

    'amt()'(overrides?: CallOverrides): Promise<BigNumber>;

    cancelRent(overrides?: CallOverrides): Promise<void>;

    'cancelRent()'(overrides?: CallOverrides): Promise<void>;

    cancellationFee(overrides?: CallOverrides): Promise<BigNumber>;

    'cancellationFee()'(overrides?: CallOverrides): Promise<BigNumber>;

    check(overrides?: CallOverrides): Promise<number>;

    'check()'(overrides?: CallOverrides): Promise<number>;

    confirmAgreement(overrides?: CallOverrides): Promise<void>;

    'confirmAgreement()'(overrides?: CallOverrides): Promise<void>;

    createdTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    'createdTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>;

    finalCheckByLessee(_condition: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'finalCheckByLessee(uint48)'(
      _condition: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    finalCheckByLessor(_condition: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'finalCheckByLessor(uint48)'(
      _condition: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getContractAddress(overrides?: CallOverrides): Promise<string>;

    'getContractAddress()'(overrides?: CallOverrides): Promise<string>;

    getContractCreated(overrides?: CallOverrides): Promise<BigNumber>;

    'getContractCreated()'(overrides?: CallOverrides): Promise<BigNumber>;

    getItem(overrides?: CallOverrides): Promise<string>;

    'getItem()'(overrides?: CallOverrides): Promise<string>;

    getLessee(overrides?: CallOverrides): Promise<string>;

    'getLessee()'(overrides?: CallOverrides): Promise<string>;

    getLessor(overrides?: CallOverrides): Promise<string>;

    'getLessor()'(overrides?: CallOverrides): Promise<string>;

    getPaidRents(
      overrides?: CallOverrides
    ): Promise<{ id: BigNumber; value: BigNumber; 0: BigNumber; 1: BigNumber }[]>;

    'getPaidRents()'(
      overrides?: CallOverrides
    ): Promise<{ id: BigNumber; value: BigNumber; 0: BigNumber; 1: BigNumber }[]>;

    getRent(overrides?: CallOverrides): Promise<BigNumber>;

    'getRent()'(overrides?: CallOverrides): Promise<BigNumber>;

    getState(overrides?: CallOverrides): Promise<number>;

    'getState()'(overrides?: CallOverrides): Promise<number>;

    incentive(overrides?: CallOverrides): Promise<BigNumber>;

    'incentive()'(overrides?: CallOverrides): Promise<BigNumber>;

    initialCheck(overrides?: CallOverrides): Promise<void>;

    'initialCheck()'(overrides?: CallOverrides): Promise<void>;

    initialCheckByLessee(_condition: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'initialCheckByLessee(uint48)'(
      _condition: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialCheckByLessor(_condition: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'initialCheckByLessor(uint48)'(
      _condition: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    item(overrides?: CallOverrides): Promise<string>;

    'item()'(overrides?: CallOverrides): Promise<string>;

    lessee(overrides?: CallOverrides): Promise<string>;

    'lessee()'(overrides?: CallOverrides): Promise<string>;

    lessor(overrides?: CallOverrides): Promise<string>;

    'lessor()'(overrides?: CallOverrides): Promise<string>;

    maxRent(overrides?: CallOverrides): Promise<BigNumber>;

    'maxRent()'(overrides?: CallOverrides): Promise<BigNumber>;

    paidrents(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      value: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    'paidrents(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      value: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    payRent(overrides?: CallOverrides): Promise<void>;

    'payRent()'(overrides?: CallOverrides): Promise<void>;

    payingRent(overrides?: CallOverrides): Promise<BigNumber>;

    'payingRent()'(overrides?: CallOverrides): Promise<BigNumber>;

    possibleRents(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'possibleRents(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    productManager(overrides?: CallOverrides): Promise<string>;

    'productManager()'(overrides?: CallOverrides): Promise<string>;

    security(overrides?: CallOverrides): Promise<BigNumber>;

    'security()'(overrides?: CallOverrides): Promise<BigNumber>;

    state(overrides?: CallOverrides): Promise<number>;

    'state()'(overrides?: CallOverrides): Promise<number>;

    terminateNormally(overrides?: CallOverrides): Promise<void>;

    'terminateNormally()'(overrides?: CallOverrides): Promise<void>;

    terminateWithAdditionalCharges(
      additionalCharges: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'terminateWithAdditionalCharges(uint256)'(
      additionalCharges: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  abstract filters: {
    agreementConfirmed(): EventFilter;

    checked(undefined: null): EventFilter;

    contractTerminated(): EventFilter;

    paidRent(): EventFilter;
  };

  abstract estimateGas: {
    amt(overrides?: CallOverrides): Promise<BigNumber>;

    'amt()'(overrides?: CallOverrides): Promise<BigNumber>;

    cancelRent(overrides?: PayableOverrides): Promise<BigNumber>;

    'cancelRent()'(overrides?: PayableOverrides): Promise<BigNumber>;

    cancellationFee(overrides?: CallOverrides): Promise<BigNumber>;

    'cancellationFee()'(overrides?: CallOverrides): Promise<BigNumber>;

    check(overrides?: CallOverrides): Promise<BigNumber>;

    'check()'(overrides?: CallOverrides): Promise<BigNumber>;

    confirmAgreement(overrides?: Overrides): Promise<BigNumber>;

    'confirmAgreement()'(overrides?: Overrides): Promise<BigNumber>;

    createdTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    'createdTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>;

    finalCheckByLessee(_condition: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    'finalCheckByLessee(uint48)'(
      _condition: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    finalCheckByLessor(_condition: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    'finalCheckByLessor(uint48)'(
      _condition: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    'getContractAddress()'(overrides?: CallOverrides): Promise<BigNumber>;

    getContractCreated(overrides?: CallOverrides): Promise<BigNumber>;

    'getContractCreated()'(overrides?: CallOverrides): Promise<BigNumber>;

    getItem(overrides?: CallOverrides): Promise<BigNumber>;

    'getItem()'(overrides?: CallOverrides): Promise<BigNumber>;

    getLessee(overrides?: CallOverrides): Promise<BigNumber>;

    'getLessee()'(overrides?: CallOverrides): Promise<BigNumber>;

    getLessor(overrides?: CallOverrides): Promise<BigNumber>;

    'getLessor()'(overrides?: CallOverrides): Promise<BigNumber>;

    getPaidRents(overrides?: CallOverrides): Promise<BigNumber>;

    'getPaidRents()'(overrides?: CallOverrides): Promise<BigNumber>;

    getRent(overrides?: CallOverrides): Promise<BigNumber>;

    'getRent()'(overrides?: CallOverrides): Promise<BigNumber>;

    getState(overrides?: CallOverrides): Promise<BigNumber>;

    'getState()'(overrides?: CallOverrides): Promise<BigNumber>;

    incentive(overrides?: CallOverrides): Promise<BigNumber>;

    'incentive()'(overrides?: CallOverrides): Promise<BigNumber>;

    initialCheck(overrides?: PayableOverrides): Promise<BigNumber>;

    'initialCheck()'(overrides?: PayableOverrides): Promise<BigNumber>;

    initialCheckByLessee(
      _condition: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    'initialCheckByLessee(uint48)'(
      _condition: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    initialCheckByLessor(_condition: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    'initialCheckByLessor(uint48)'(
      _condition: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    item(overrides?: CallOverrides): Promise<BigNumber>;

    'item()'(overrides?: CallOverrides): Promise<BigNumber>;

    lessee(overrides?: CallOverrides): Promise<BigNumber>;

    'lessee()'(overrides?: CallOverrides): Promise<BigNumber>;

    lessor(overrides?: CallOverrides): Promise<BigNumber>;

    'lessor()'(overrides?: CallOverrides): Promise<BigNumber>;

    maxRent(overrides?: CallOverrides): Promise<BigNumber>;

    'maxRent()'(overrides?: CallOverrides): Promise<BigNumber>;

    paidrents(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'paidrents(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    payRent(overrides?: PayableOverrides): Promise<BigNumber>;

    'payRent()'(overrides?: PayableOverrides): Promise<BigNumber>;

    payingRent(overrides?: CallOverrides): Promise<BigNumber>;

    'payingRent()'(overrides?: CallOverrides): Promise<BigNumber>;

    possibleRents(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'possibleRents(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    productManager(overrides?: CallOverrides): Promise<BigNumber>;

    'productManager()'(overrides?: CallOverrides): Promise<BigNumber>;

    security(overrides?: CallOverrides): Promise<BigNumber>;

    'security()'(overrides?: CallOverrides): Promise<BigNumber>;

    state(overrides?: CallOverrides): Promise<BigNumber>;

    'state()'(overrides?: CallOverrides): Promise<BigNumber>;

    terminateNormally(overrides?: PayableOverrides): Promise<BigNumber>;

    'terminateNormally()'(overrides?: PayableOverrides): Promise<BigNumber>;

    terminateWithAdditionalCharges(
      additionalCharges: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    'terminateWithAdditionalCharges(uint256)'(
      additionalCharges: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;
  };

  abstract populateTransaction: {
    amt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'amt()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelRent(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    'cancelRent()'(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    cancellationFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'cancellationFee()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    check(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'check()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    confirmAgreement(overrides?: Overrides): Promise<PopulatedTransaction>;

    'confirmAgreement()'(overrides?: Overrides): Promise<PopulatedTransaction>;

    createdTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'createdTimestamp()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalCheckByLessee(
      _condition: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'finalCheckByLessee(uint48)'(
      _condition: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    finalCheckByLessor(
      _condition: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'finalCheckByLessor(uint48)'(
      _condition: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getContractAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getContractAddress()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContractCreated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getContractCreated()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getItem(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getItem()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLessee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getLessee()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLessor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getLessor()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPaidRents(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getPaidRents()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getRent()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getState()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    incentive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'incentive()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialCheck(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    'initialCheck()'(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    initialCheckByLessee(
      _condition: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    'initialCheckByLessee(uint48)'(
      _condition: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    initialCheckByLessor(
      _condition: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'initialCheckByLessor(uint48)'(
      _condition: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    item(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'item()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lessee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'lessee()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lessor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'lessor()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxRent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'maxRent()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paidrents(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'paidrents(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payRent(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    'payRent()'(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    payingRent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'payingRent()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    possibleRents(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'possibleRents(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    productManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'productManager()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    security(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'security()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    state(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'state()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    terminateNormally(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    'terminateNormally()'(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    terminateWithAdditionalCharges(
      additionalCharges: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    'terminateWithAdditionalCharges(uint256)'(
      additionalCharges: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;
  };
}
