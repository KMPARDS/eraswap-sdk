/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface EventManagerInterface extends ethers.utils.Interface {
  functions: {
    "bookingDappManager()": FunctionFragment;
    "bookingDappOwner()": FunctionFragment;
    "buyTicket(uint256[])": FunctionFragment;
    "cancelEvent()": FunctionFragment;
    "cancelTicket(uint256[])": FunctionFragment;
    "eventDesc()": FunctionFragment;
    "eventLocation()": FunctionFragment;
    "eventName()": FunctionFragment;
    "eventOwner()": FunctionFragment;
    "eventStartTime()": FunctionFragment;
    "eventStatus()": FunctionFragment;
    "getPrices()": FunctionFragment;
    "getSeats()": FunctionFragment;
    "getSeatsCount()": FunctionFragment;
    "incentive()": FunctionFragment;
    "pricePerType(uint256)": FunctionFragment;
    "seatOwner(uint256)": FunctionFragment;
    "seatStatus(uint256)": FunctionFragment;
    "seatTypeId(uint256)": FunctionFragment;
    "seatTypes()": FunctionFragment;
    "seatsPer(uint256)": FunctionFragment;
    "seatsPerType(uint256)": FunctionFragment;
    "totalSeats()": FunctionFragment;
    "wallet()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bookingDappManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bookingDappOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyTicket",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelEvent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTicket",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "eventDesc", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "eventLocation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "eventName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "eventOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eventStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eventStatus",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPrices", values?: undefined): string;
  encodeFunctionData(functionFragment: "getSeats", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getSeatsCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "incentive", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pricePerType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "seatOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "seatStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "seatTypeId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "seatTypes", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "seatsPer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "seatsPerType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSeats",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "wallet", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "bookingDappManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bookingDappOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eventDesc", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eventLocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eventName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eventOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eventStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eventStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrices", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSeats", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSeatsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "incentive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pricePerType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seatOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "seatStatus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "seatTypeId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "seatTypes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "seatsPer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "seatsPerType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalSeats", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wallet", data: BytesLike): Result;

  events: {
    "CancelledTicket(address,uint256[])": EventFragment;
    "SoldTicket(address,uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelledTicket"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SoldTicket"): EventFragment;
}

export class EventManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: EventManagerInterface;

  functions: {
    bookingDappManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "bookingDappManager()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    bookingDappOwner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "bookingDappOwner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    buyTicket(
      seatNo: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "buyTicket(uint256[])"(
      seatNo: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    cancelEvent(overrides?: PayableOverrides): Promise<ContractTransaction>;

    "cancelEvent()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

    cancelTicket(
      seatNo: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "cancelTicket(uint256[])"(
      seatNo: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    eventDesc(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "eventDesc()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    eventLocation(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "eventLocation()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    eventName(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "eventName()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    eventOwner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "eventOwner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    eventStartTime(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "eventStartTime()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    eventStatus(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "eventStatus()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    getPrices(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    "getPrices()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    getSeats(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    "getSeats()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    getSeatsCount(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    "getSeatsCount()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    incentive(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "incentive()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    pricePerType(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "pricePerType(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    seatOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "seatOwner(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    seatStatus(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "seatStatus(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    seatTypeId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "seatTypeId(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    seatTypes(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "seatTypes()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    seatsPer(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "seatsPer(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    seatsPerType(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "seatsPerType(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    totalSeats(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalSeats()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    wallet(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "wallet()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  bookingDappManager(overrides?: CallOverrides): Promise<string>;

  "bookingDappManager()"(overrides?: CallOverrides): Promise<string>;

  bookingDappOwner(overrides?: CallOverrides): Promise<string>;

  "bookingDappOwner()"(overrides?: CallOverrides): Promise<string>;

  buyTicket(
    seatNo: BigNumberish[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "buyTicket(uint256[])"(
    seatNo: BigNumberish[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  cancelEvent(overrides?: PayableOverrides): Promise<ContractTransaction>;

  "cancelEvent()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

  cancelTicket(
    seatNo: BigNumberish[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "cancelTicket(uint256[])"(
    seatNo: BigNumberish[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  eventDesc(overrides?: CallOverrides): Promise<string>;

  "eventDesc()"(overrides?: CallOverrides): Promise<string>;

  eventLocation(overrides?: CallOverrides): Promise<string>;

  "eventLocation()"(overrides?: CallOverrides): Promise<string>;

  eventName(overrides?: CallOverrides): Promise<string>;

  "eventName()"(overrides?: CallOverrides): Promise<string>;

  eventOwner(overrides?: CallOverrides): Promise<string>;

  "eventOwner()"(overrides?: CallOverrides): Promise<string>;

  eventStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  "eventStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  eventStatus(overrides?: CallOverrides): Promise<boolean>;

  "eventStatus()"(overrides?: CallOverrides): Promise<boolean>;

  getPrices(overrides?: CallOverrides): Promise<BigNumber[]>;

  "getPrices()"(overrides?: CallOverrides): Promise<BigNumber[]>;

  getSeats(overrides?: CallOverrides): Promise<BigNumber[]>;

  "getSeats()"(overrides?: CallOverrides): Promise<BigNumber[]>;

  getSeatsCount(overrides?: CallOverrides): Promise<BigNumber[]>;

  "getSeatsCount()"(overrides?: CallOverrides): Promise<BigNumber[]>;

  incentive(overrides?: CallOverrides): Promise<BigNumber>;

  "incentive()"(overrides?: CallOverrides): Promise<BigNumber>;

  pricePerType(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "pricePerType(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  seatOwner(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "seatOwner(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  seatStatus(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "seatStatus(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  seatTypeId(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "seatTypeId(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  seatTypes(overrides?: CallOverrides): Promise<BigNumber>;

  "seatTypes()"(overrides?: CallOverrides): Promise<BigNumber>;

  seatsPer(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "seatsPer(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  seatsPerType(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "seatsPerType(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalSeats(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSeats()"(overrides?: CallOverrides): Promise<BigNumber>;

  wallet(overrides?: CallOverrides): Promise<BigNumber>;

  "wallet()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    bookingDappManager(overrides?: CallOverrides): Promise<string>;

    "bookingDappManager()"(overrides?: CallOverrides): Promise<string>;

    bookingDappOwner(overrides?: CallOverrides): Promise<string>;

    "bookingDappOwner()"(overrides?: CallOverrides): Promise<string>;

    buyTicket(seatNo: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    "buyTicket(uint256[])"(
      seatNo: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    cancelEvent(overrides?: CallOverrides): Promise<void>;

    "cancelEvent()"(overrides?: CallOverrides): Promise<void>;

    cancelTicket(
      seatNo: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelTicket(uint256[])"(
      seatNo: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    eventDesc(overrides?: CallOverrides): Promise<string>;

    "eventDesc()"(overrides?: CallOverrides): Promise<string>;

    eventLocation(overrides?: CallOverrides): Promise<string>;

    "eventLocation()"(overrides?: CallOverrides): Promise<string>;

    eventName(overrides?: CallOverrides): Promise<string>;

    "eventName()"(overrides?: CallOverrides): Promise<string>;

    eventOwner(overrides?: CallOverrides): Promise<string>;

    "eventOwner()"(overrides?: CallOverrides): Promise<string>;

    eventStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    "eventStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    eventStatus(overrides?: CallOverrides): Promise<boolean>;

    "eventStatus()"(overrides?: CallOverrides): Promise<boolean>;

    getPrices(overrides?: CallOverrides): Promise<BigNumber[]>;

    "getPrices()"(overrides?: CallOverrides): Promise<BigNumber[]>;

    getSeats(overrides?: CallOverrides): Promise<BigNumber[]>;

    "getSeats()"(overrides?: CallOverrides): Promise<BigNumber[]>;

    getSeatsCount(overrides?: CallOverrides): Promise<BigNumber[]>;

    "getSeatsCount()"(overrides?: CallOverrides): Promise<BigNumber[]>;

    incentive(overrides?: CallOverrides): Promise<BigNumber>;

    "incentive()"(overrides?: CallOverrides): Promise<BigNumber>;

    pricePerType(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pricePerType(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seatOwner(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "seatOwner(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    seatStatus(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "seatStatus(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    seatTypeId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "seatTypeId(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seatTypes(overrides?: CallOverrides): Promise<BigNumber>;

    "seatTypes()"(overrides?: CallOverrides): Promise<BigNumber>;

    seatsPer(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "seatsPer(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seatsPerType(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "seatsPerType(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSeats(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSeats()"(overrides?: CallOverrides): Promise<BigNumber>;

    wallet(overrides?: CallOverrides): Promise<BigNumber>;

    "wallet()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    CancelledTicket(buyer: string | null, seats: null): EventFilter;

    SoldTicket(buyer: string | null, seats: null): EventFilter;
  };

  estimateGas: {
    bookingDappManager(overrides?: CallOverrides): Promise<BigNumber>;

    "bookingDappManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    bookingDappOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "bookingDappOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    buyTicket(
      seatNo: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "buyTicket(uint256[])"(
      seatNo: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    cancelEvent(overrides?: PayableOverrides): Promise<BigNumber>;

    "cancelEvent()"(overrides?: PayableOverrides): Promise<BigNumber>;

    cancelTicket(
      seatNo: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "cancelTicket(uint256[])"(
      seatNo: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    eventDesc(overrides?: CallOverrides): Promise<BigNumber>;

    "eventDesc()"(overrides?: CallOverrides): Promise<BigNumber>;

    eventLocation(overrides?: CallOverrides): Promise<BigNumber>;

    "eventLocation()"(overrides?: CallOverrides): Promise<BigNumber>;

    eventName(overrides?: CallOverrides): Promise<BigNumber>;

    "eventName()"(overrides?: CallOverrides): Promise<BigNumber>;

    eventOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "eventOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    eventStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    "eventStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    eventStatus(overrides?: CallOverrides): Promise<BigNumber>;

    "eventStatus()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPrices(overrides?: CallOverrides): Promise<BigNumber>;

    "getPrices()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSeats(overrides?: CallOverrides): Promise<BigNumber>;

    "getSeats()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSeatsCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getSeatsCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    incentive(overrides?: CallOverrides): Promise<BigNumber>;

    "incentive()"(overrides?: CallOverrides): Promise<BigNumber>;

    pricePerType(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pricePerType(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seatOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "seatOwner(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seatStatus(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "seatStatus(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seatTypeId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "seatTypeId(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seatTypes(overrides?: CallOverrides): Promise<BigNumber>;

    "seatTypes()"(overrides?: CallOverrides): Promise<BigNumber>;

    seatsPer(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "seatsPer(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seatsPerType(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "seatsPerType(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSeats(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSeats()"(overrides?: CallOverrides): Promise<BigNumber>;

    wallet(overrides?: CallOverrides): Promise<BigNumber>;

    "wallet()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    bookingDappManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bookingDappManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bookingDappOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bookingDappOwner()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyTicket(
      seatNo: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "buyTicket(uint256[])"(
      seatNo: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    cancelEvent(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    "cancelEvent()"(
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    cancelTicket(
      seatNo: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "cancelTicket(uint256[])"(
      seatNo: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    eventDesc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "eventDesc()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eventLocation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "eventLocation()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eventName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "eventName()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eventOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "eventOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eventStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "eventStartTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eventStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "eventStatus()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrices(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPrices()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSeats(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getSeats()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSeatsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getSeatsCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    incentive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "incentive()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pricePerType(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pricePerType(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    seatOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "seatOwner(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    seatStatus(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "seatStatus(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    seatTypeId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "seatTypeId(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    seatTypes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "seatTypes()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seatsPer(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "seatsPer(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    seatsPerType(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "seatsPerType(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSeats(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSeats()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wallet()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
