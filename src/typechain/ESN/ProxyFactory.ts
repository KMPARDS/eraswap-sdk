/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, BytesLike } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import { Contract, ContractFactory, Overrides } from '@ethersproject/contracts';

import type { Proxy } from './Proxy';

export class ProxyFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(constructData: BytesLike, contractLogic: string, overrides?: Overrides): Promise<Proxy> {
    return super.deploy(constructData, contractLogic, overrides || {}) as Promise<Proxy>;
  }
  getDeployTransaction(
    constructData: BytesLike,
    contractLogic: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(constructData, contractLogic, overrides || {});
  }
  attach(address: string): Proxy {
    return super.attach(address) as Proxy;
  }
  connect(signer: Signer): ProxyFactory {
    return super.connect(signer) as ProxyFactory;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Proxy {
    return new Contract(address, _abi, signerOrProvider) as Proxy;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'constructData',
        type: 'bytes',
      },
      {
        internalType: 'address',
        name: 'contractLogic',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    stateMutability: 'payable',
    type: 'fallback',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b506040516102b73803806102b78339818101604052604081101561003357600080fd5b810190808051604051939291908464010000000082111561005357600080fd5b90830190602082018581111561006857600080fd5b825164010000000081118282018810171561008257600080fd5b82525081516020918201929091019080838360005b838110156100af578181015183820152602001610097565b50505050905090810190601f1680156100dc5780820380516001836020036101000a031916815260200191505b5060408190526020918201517fc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf78190558551909450600093506001600160a01b0385169286929182918401908083835b6020831061014b5780518252601f19909201916020918201910161012c565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146101ab576040519150601f19603f3d011682016040523d82523d6000602084013e6101b0565b606091505b5050905080610206576040805162461bcd60e51b815260206004820152601360248201527f436f6e737472756374696f6e206661696c656400000000000000000000000000604482015290519081900360640190fd5b50505060a0806102176000396000f3fe60806040527fc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf75460003681823780813683857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd8f05a01f491503d8082833e8280156066578183f35b8183fdfea2646970667358221220e8bdcfb840b6f616b37d1cda5725d4f2dc3fb4b592bf572f6f5aea70c72e247364736f6c63430007020033';
