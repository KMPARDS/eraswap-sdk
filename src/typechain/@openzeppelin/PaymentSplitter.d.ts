/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers';
import { Contract, ContractTransaction, Overrides, CallOverrides } from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

interface PaymentSplitterInterface extends ethers.utils.Interface {
  functions: {
    'payee(uint256)': FunctionFragment;
    'release(address)': FunctionFragment;
    'released(address)': FunctionFragment;
    'shares(address)': FunctionFragment;
    'totalReleased()': FunctionFragment;
    'totalShares()': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'payee', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'release', values: [string]): string;
  encodeFunctionData(functionFragment: 'released', values: [string]): string;
  encodeFunctionData(functionFragment: 'shares', values: [string]): string;
  encodeFunctionData(functionFragment: 'totalReleased', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalShares', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'payee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'release', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'released', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'shares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalReleased', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalShares', data: BytesLike): Result;

  events: {
    'PayeeAdded(address,uint256)': EventFragment;
    'PaymentReceived(address,uint256)': EventFragment;
    'PaymentReleased(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'PayeeAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PaymentReceived'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PaymentReleased'): EventFragment;
}

export class PaymentSplitter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PaymentSplitterInterface;

  functions: {
    /**
     * Getter for the address of the payee number `index`.
     */
    payee(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Getter for the address of the payee number `index`.
     */
    'payee(uint256)'(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals.
     */
    release(account: string, overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals.
     */
    'release(address)'(account: string, overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Getter for the amount of Ether already released to a payee.
     */
    released(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Getter for the amount of Ether already released to a payee.
     */
    'released(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Getter for the amount of shares held by an account.
     */
    shares(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Getter for the amount of shares held by an account.
     */
    'shares(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Getter for the total amount of Ether already released.
     */
    totalReleased(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Getter for the total amount of Ether already released.
     */
    'totalReleased()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Getter for the total shares held by payees.
     */
    totalShares(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Getter for the total shares held by payees.
     */
    'totalShares()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  /**
   * Getter for the address of the payee number `index`.
   */
  payee(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  /**
   * Getter for the address of the payee number `index`.
   */
  'payee(uint256)'(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  /**
   * Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals.
   */
  release(account: string, overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals.
   */
  'release(address)'(account: string, overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Getter for the amount of Ether already released to a payee.
   */
  released(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Getter for the amount of Ether already released to a payee.
   */
  'released(address)'(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Getter for the amount of shares held by an account.
   */
  shares(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Getter for the amount of shares held by an account.
   */
  'shares(address)'(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Getter for the total amount of Ether already released.
   */
  totalReleased(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Getter for the total amount of Ether already released.
   */
  'totalReleased()'(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Getter for the total shares held by payees.
   */
  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Getter for the total shares held by payees.
   */
  'totalShares()'(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    /**
     * Getter for the address of the payee number `index`.
     */
    payee(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    /**
     * Getter for the address of the payee number `index`.
     */
    'payee(uint256)'(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    /**
     * Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals.
     */
    release(account: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals.
     */
    'release(address)'(account: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Getter for the amount of Ether already released to a payee.
     */
    released(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the amount of Ether already released to a payee.
     */
    'released(address)'(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the amount of shares held by an account.
     */
    shares(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the amount of shares held by an account.
     */
    'shares(address)'(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the total amount of Ether already released.
     */
    totalReleased(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the total amount of Ether already released.
     */
    'totalReleased()'(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the total shares held by payees.
     */
    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the total shares held by payees.
     */
    'totalShares()'(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    PayeeAdded(account: null, shares: null): EventFilter;

    PaymentReceived(from: null, amount: null): EventFilter;

    PaymentReleased(to: null, amount: null): EventFilter;
  };

  estimateGas: {
    /**
     * Getter for the address of the payee number `index`.
     */
    payee(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the address of the payee number `index`.
     */
    'payee(uint256)'(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals.
     */
    release(account: string, overrides?: Overrides): Promise<BigNumber>;

    /**
     * Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals.
     */
    'release(address)'(account: string, overrides?: Overrides): Promise<BigNumber>;

    /**
     * Getter for the amount of Ether already released to a payee.
     */
    released(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the amount of Ether already released to a payee.
     */
    'released(address)'(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the amount of shares held by an account.
     */
    shares(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the amount of shares held by an account.
     */
    'shares(address)'(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the total amount of Ether already released.
     */
    totalReleased(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the total amount of Ether already released.
     */
    'totalReleased()'(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the total shares held by payees.
     */
    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the total shares held by payees.
     */
    'totalShares()'(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Getter for the address of the payee number `index`.
     */
    payee(index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Getter for the address of the payee number `index`.
     */
    'payee(uint256)'(index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals.
     */
    release(account: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals.
     */
    'release(address)'(account: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Getter for the amount of Ether already released to a payee.
     */
    released(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Getter for the amount of Ether already released to a payee.
     */
    'released(address)'(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Getter for the amount of shares held by an account.
     */
    shares(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Getter for the amount of shares held by an account.
     */
    'shares(address)'(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Getter for the total amount of Ether already released.
     */
    totalReleased(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Getter for the total amount of Ether already released.
     */
    'totalReleased()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Getter for the total shares held by payees.
     */
    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Getter for the total shares held by payees.
     */
    'totalShares()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
