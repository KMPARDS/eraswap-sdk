/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers';
import { Contract, ContractTransaction, Overrides, CallOverrides } from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

interface Ierc1820RegistryInterface extends ethers.utils.Interface {
  functions: {
    'getInterfaceImplementer(address,bytes32)': FunctionFragment;
    'getManager(address)': FunctionFragment;
    'implementsERC165Interface(address,bytes4)': FunctionFragment;
    'implementsERC165InterfaceNoCache(address,bytes4)': FunctionFragment;
    'interfaceHash(string)': FunctionFragment;
    'setInterfaceImplementer(address,bytes32,address)': FunctionFragment;
    'setManager(address,address)': FunctionFragment;
    'updateERC165Cache(address,bytes4)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'getInterfaceImplementer',
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: 'getManager', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'implementsERC165Interface',
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'implementsERC165InterfaceNoCache',
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: 'interfaceHash', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'setInterfaceImplementer',
    values: [string, BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: 'setManager', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'updateERC165Cache', values: [string, BytesLike]): string;

  decodeFunctionResult(functionFragment: 'getInterfaceImplementer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'implementsERC165Interface', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'implementsERC165InterfaceNoCache',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'interfaceHash', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setInterfaceImplementer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateERC165Cache', data: BytesLike): Result;

  events: {
    'InterfaceImplementerSet(address,bytes32,address)': EventFragment;
    'ManagerChanged(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'InterfaceImplementerSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ManagerChanged'): EventFragment;
}

export class Ierc1820Registry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: Ierc1820RegistryInterface;

  functions: {
    /**
     * Returns the implementer of `interfaceHash` for `account`. If no such implementer is registered, returns the zero address. If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28 zeroes), `account` will be queried for support of it. `account` being the zero address is an alias for the caller's address.
     */
    getInterfaceImplementer(
      account: string,
      interfaceHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the implementer of `interfaceHash` for `account`. If no such implementer is registered, returns the zero address. If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28 zeroes), `account` will be queried for support of it. `account` being the zero address is an alias for the caller's address.
     */
    'getInterfaceImplementer(address,bytes32)'(
      account: string,
      interfaceHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the manager for `account`. See {setManager}.
     */
    getManager(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the manager for `account`. See {setManager}.
     */
    'getManager(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Checks whether a contract implements an ERC165 interface or not.  If the result is not cached a direct lookup on the contract address is performed.  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling  {updateERC165Cache} with the contract address.
     * @param account Address of the contract to check.
     * @param interfaceId ERC165 interface to check.
     */
    implementsERC165Interface(
      account: string,
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    /**
     * Checks whether a contract implements an ERC165 interface or not.  If the result is not cached a direct lookup on the contract address is performed.  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling  {updateERC165Cache} with the contract address.
     * @param account Address of the contract to check.
     * @param interfaceId ERC165 interface to check.
     */
    'implementsERC165Interface(address,bytes4)'(
      account: string,
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    /**
     * Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.
     * @param account Address of the contract to check.
     * @param interfaceId ERC165 interface to check.
     */
    implementsERC165InterfaceNoCache(
      account: string,
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    /**
     * Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.
     * @param account Address of the contract to check.
     * @param interfaceId ERC165 interface to check.
     */
    'implementsERC165InterfaceNoCache(address,bytes4)'(
      account: string,
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    /**
     * Returns the interface hash for an `interfaceName`, as defined in the corresponding https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].
     */
    interfaceHash(
      interfaceName: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the interface hash for an `interfaceName`, as defined in the corresponding https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].
     */
    'interfaceHash(string)'(
      interfaceName: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Sets the `implementer` contract as ``account``'s implementer for `interfaceHash`. `account` being the zero address is an alias for the caller's address. The zero address can also be used in `implementer` to remove an old one. See {interfaceHash} to learn how these are created. Emits an {InterfaceImplementerSet} event. Requirements: - the caller must be the current manager for `account`. - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not end in 28 zeroes). - `implementer` must implement {IERC1820Implementer} and return true when queried for support, unless `implementer` is the caller. See {IERC1820Implementer-canImplementInterfaceForAddress}.
     */
    setInterfaceImplementer(
      account: string,
      interfaceHash: BytesLike,
      implementer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Sets the `implementer` contract as ``account``'s implementer for `interfaceHash`. `account` being the zero address is an alias for the caller's address. The zero address can also be used in `implementer` to remove an old one. See {interfaceHash} to learn how these are created. Emits an {InterfaceImplementerSet} event. Requirements: - the caller must be the current manager for `account`. - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not end in 28 zeroes). - `implementer` must implement {IERC1820Implementer} and return true when queried for support, unless `implementer` is the caller. See {IERC1820Implementer-canImplementInterfaceForAddress}.
     */
    'setInterfaceImplementer(address,bytes32,address)'(
      account: string,
      interfaceHash: BytesLike,
      implementer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Sets `newManager` as the manager for `account`. A manager of an account is able to set interface implementers for it. By default, each account is its own manager. Passing a value of `0x0` in `newManager` will reset the manager to this initial state. Emits a {ManagerChanged} event. Requirements: - the caller must be the current manager for `account`.
     */
    setManager(
      account: string,
      newManager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Sets `newManager` as the manager for `account`. A manager of an account is able to set interface implementers for it. By default, each account is its own manager. Passing a value of `0x0` in `newManager` will reset the manager to this initial state. Emits a {ManagerChanged} event. Requirements: - the caller must be the current manager for `account`.
     */
    'setManager(address,address)'(
      account: string,
      newManager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Updates the cache with whether the contract implements an ERC165 interface or not.
     * @param account Address of the contract for which to update the cache.
     * @param interfaceId ERC165 interface for which to update the cache.
     */
    updateERC165Cache(
      account: string,
      interfaceId: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Updates the cache with whether the contract implements an ERC165 interface or not.
     * @param account Address of the contract for which to update the cache.
     * @param interfaceId ERC165 interface for which to update the cache.
     */
    'updateERC165Cache(address,bytes4)'(
      account: string,
      interfaceId: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  /**
   * Returns the implementer of `interfaceHash` for `account`. If no such implementer is registered, returns the zero address. If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28 zeroes), `account` will be queried for support of it. `account` being the zero address is an alias for the caller's address.
   */
  getInterfaceImplementer(
    account: string,
    interfaceHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Returns the implementer of `interfaceHash` for `account`. If no such implementer is registered, returns the zero address. If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28 zeroes), `account` will be queried for support of it. `account` being the zero address is an alias for the caller's address.
   */
  'getInterfaceImplementer(address,bytes32)'(
    account: string,
    interfaceHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Returns the manager for `account`. See {setManager}.
   */
  getManager(account: string, overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the manager for `account`. See {setManager}.
   */
  'getManager(address)'(account: string, overrides?: CallOverrides): Promise<string>;

  /**
   * Checks whether a contract implements an ERC165 interface or not.  If the result is not cached a direct lookup on the contract address is performed.  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling  {updateERC165Cache} with the contract address.
   * @param account Address of the contract to check.
   * @param interfaceId ERC165 interface to check.
   */
  implementsERC165Interface(
    account: string,
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Checks whether a contract implements an ERC165 interface or not.  If the result is not cached a direct lookup on the contract address is performed.  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling  {updateERC165Cache} with the contract address.
   * @param account Address of the contract to check.
   * @param interfaceId ERC165 interface to check.
   */
  'implementsERC165Interface(address,bytes4)'(
    account: string,
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.
   * @param account Address of the contract to check.
   * @param interfaceId ERC165 interface to check.
   */
  implementsERC165InterfaceNoCache(
    account: string,
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.
   * @param account Address of the contract to check.
   * @param interfaceId ERC165 interface to check.
   */
  'implementsERC165InterfaceNoCache(address,bytes4)'(
    account: string,
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Returns the interface hash for an `interfaceName`, as defined in the corresponding https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].
   */
  interfaceHash(interfaceName: string, overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the interface hash for an `interfaceName`, as defined in the corresponding https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].
   */
  'interfaceHash(string)'(interfaceName: string, overrides?: CallOverrides): Promise<string>;

  /**
   * Sets the `implementer` contract as ``account``'s implementer for `interfaceHash`. `account` being the zero address is an alias for the caller's address. The zero address can also be used in `implementer` to remove an old one. See {interfaceHash} to learn how these are created. Emits an {InterfaceImplementerSet} event. Requirements: - the caller must be the current manager for `account`. - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not end in 28 zeroes). - `implementer` must implement {IERC1820Implementer} and return true when queried for support, unless `implementer` is the caller. See {IERC1820Implementer-canImplementInterfaceForAddress}.
   */
  setInterfaceImplementer(
    account: string,
    interfaceHash: BytesLike,
    implementer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Sets the `implementer` contract as ``account``'s implementer for `interfaceHash`. `account` being the zero address is an alias for the caller's address. The zero address can also be used in `implementer` to remove an old one. See {interfaceHash} to learn how these are created. Emits an {InterfaceImplementerSet} event. Requirements: - the caller must be the current manager for `account`. - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not end in 28 zeroes). - `implementer` must implement {IERC1820Implementer} and return true when queried for support, unless `implementer` is the caller. See {IERC1820Implementer-canImplementInterfaceForAddress}.
   */
  'setInterfaceImplementer(address,bytes32,address)'(
    account: string,
    interfaceHash: BytesLike,
    implementer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Sets `newManager` as the manager for `account`. A manager of an account is able to set interface implementers for it. By default, each account is its own manager. Passing a value of `0x0` in `newManager` will reset the manager to this initial state. Emits a {ManagerChanged} event. Requirements: - the caller must be the current manager for `account`.
   */
  setManager(
    account: string,
    newManager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Sets `newManager` as the manager for `account`. A manager of an account is able to set interface implementers for it. By default, each account is its own manager. Passing a value of `0x0` in `newManager` will reset the manager to this initial state. Emits a {ManagerChanged} event. Requirements: - the caller must be the current manager for `account`.
   */
  'setManager(address,address)'(
    account: string,
    newManager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Updates the cache with whether the contract implements an ERC165 interface or not.
   * @param account Address of the contract for which to update the cache.
   * @param interfaceId ERC165 interface for which to update the cache.
   */
  updateERC165Cache(
    account: string,
    interfaceId: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Updates the cache with whether the contract implements an ERC165 interface or not.
   * @param account Address of the contract for which to update the cache.
   * @param interfaceId ERC165 interface for which to update the cache.
   */
  'updateERC165Cache(address,bytes4)'(
    account: string,
    interfaceId: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Returns the implementer of `interfaceHash` for `account`. If no such implementer is registered, returns the zero address. If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28 zeroes), `account` will be queried for support of it. `account` being the zero address is an alias for the caller's address.
     */
    getInterfaceImplementer(
      account: string,
      interfaceHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Returns the implementer of `interfaceHash` for `account`. If no such implementer is registered, returns the zero address. If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28 zeroes), `account` will be queried for support of it. `account` being the zero address is an alias for the caller's address.
     */
    'getInterfaceImplementer(address,bytes32)'(
      account: string,
      interfaceHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Returns the manager for `account`. See {setManager}.
     */
    getManager(account: string, overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the manager for `account`. See {setManager}.
     */
    'getManager(address)'(account: string, overrides?: CallOverrides): Promise<string>;

    /**
     * Checks whether a contract implements an ERC165 interface or not.  If the result is not cached a direct lookup on the contract address is performed.  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling  {updateERC165Cache} with the contract address.
     * @param account Address of the contract to check.
     * @param interfaceId ERC165 interface to check.
     */
    implementsERC165Interface(
      account: string,
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Checks whether a contract implements an ERC165 interface or not.  If the result is not cached a direct lookup on the contract address is performed.  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling  {updateERC165Cache} with the contract address.
     * @param account Address of the contract to check.
     * @param interfaceId ERC165 interface to check.
     */
    'implementsERC165Interface(address,bytes4)'(
      account: string,
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.
     * @param account Address of the contract to check.
     * @param interfaceId ERC165 interface to check.
     */
    implementsERC165InterfaceNoCache(
      account: string,
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.
     * @param account Address of the contract to check.
     * @param interfaceId ERC165 interface to check.
     */
    'implementsERC165InterfaceNoCache(address,bytes4)'(
      account: string,
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Returns the interface hash for an `interfaceName`, as defined in the corresponding https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].
     */
    interfaceHash(interfaceName: string, overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the interface hash for an `interfaceName`, as defined in the corresponding https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].
     */
    'interfaceHash(string)'(interfaceName: string, overrides?: CallOverrides): Promise<string>;

    /**
     * Sets the `implementer` contract as ``account``'s implementer for `interfaceHash`. `account` being the zero address is an alias for the caller's address. The zero address can also be used in `implementer` to remove an old one. See {interfaceHash} to learn how these are created. Emits an {InterfaceImplementerSet} event. Requirements: - the caller must be the current manager for `account`. - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not end in 28 zeroes). - `implementer` must implement {IERC1820Implementer} and return true when queried for support, unless `implementer` is the caller. See {IERC1820Implementer-canImplementInterfaceForAddress}.
     */
    setInterfaceImplementer(
      account: string,
      interfaceHash: BytesLike,
      implementer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Sets the `implementer` contract as ``account``'s implementer for `interfaceHash`. `account` being the zero address is an alias for the caller's address. The zero address can also be used in `implementer` to remove an old one. See {interfaceHash} to learn how these are created. Emits an {InterfaceImplementerSet} event. Requirements: - the caller must be the current manager for `account`. - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not end in 28 zeroes). - `implementer` must implement {IERC1820Implementer} and return true when queried for support, unless `implementer` is the caller. See {IERC1820Implementer-canImplementInterfaceForAddress}.
     */
    'setInterfaceImplementer(address,bytes32,address)'(
      account: string,
      interfaceHash: BytesLike,
      implementer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Sets `newManager` as the manager for `account`. A manager of an account is able to set interface implementers for it. By default, each account is its own manager. Passing a value of `0x0` in `newManager` will reset the manager to this initial state. Emits a {ManagerChanged} event. Requirements: - the caller must be the current manager for `account`.
     */
    setManager(account: string, newManager: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Sets `newManager` as the manager for `account`. A manager of an account is able to set interface implementers for it. By default, each account is its own manager. Passing a value of `0x0` in `newManager` will reset the manager to this initial state. Emits a {ManagerChanged} event. Requirements: - the caller must be the current manager for `account`.
     */
    'setManager(address,address)'(
      account: string,
      newManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Updates the cache with whether the contract implements an ERC165 interface or not.
     * @param account Address of the contract for which to update the cache.
     * @param interfaceId ERC165 interface for which to update the cache.
     */
    updateERC165Cache(
      account: string,
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Updates the cache with whether the contract implements an ERC165 interface or not.
     * @param account Address of the contract for which to update the cache.
     * @param interfaceId ERC165 interface for which to update the cache.
     */
    'updateERC165Cache(address,bytes4)'(
      account: string,
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    InterfaceImplementerSet(
      account: string | null,
      interfaceHash: BytesLike | null,
      implementer: string | null
    ): EventFilter;

    ManagerChanged(account: string | null, newManager: string | null): EventFilter;
  };

  estimateGas: {
    /**
     * Returns the implementer of `interfaceHash` for `account`. If no such implementer is registered, returns the zero address. If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28 zeroes), `account` will be queried for support of it. `account` being the zero address is an alias for the caller's address.
     */
    getInterfaceImplementer(
      account: string,
      interfaceHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the implementer of `interfaceHash` for `account`. If no such implementer is registered, returns the zero address. If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28 zeroes), `account` will be queried for support of it. `account` being the zero address is an alias for the caller's address.
     */
    'getInterfaceImplementer(address,bytes32)'(
      account: string,
      interfaceHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the manager for `account`. See {setManager}.
     */
    getManager(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the manager for `account`. See {setManager}.
     */
    'getManager(address)'(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Checks whether a contract implements an ERC165 interface or not.  If the result is not cached a direct lookup on the contract address is performed.  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling  {updateERC165Cache} with the contract address.
     * @param account Address of the contract to check.
     * @param interfaceId ERC165 interface to check.
     */
    implementsERC165Interface(
      account: string,
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Checks whether a contract implements an ERC165 interface or not.  If the result is not cached a direct lookup on the contract address is performed.  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling  {updateERC165Cache} with the contract address.
     * @param account Address of the contract to check.
     * @param interfaceId ERC165 interface to check.
     */
    'implementsERC165Interface(address,bytes4)'(
      account: string,
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.
     * @param account Address of the contract to check.
     * @param interfaceId ERC165 interface to check.
     */
    implementsERC165InterfaceNoCache(
      account: string,
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.
     * @param account Address of the contract to check.
     * @param interfaceId ERC165 interface to check.
     */
    'implementsERC165InterfaceNoCache(address,bytes4)'(
      account: string,
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the interface hash for an `interfaceName`, as defined in the corresponding https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].
     */
    interfaceHash(interfaceName: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the interface hash for an `interfaceName`, as defined in the corresponding https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].
     */
    'interfaceHash(string)'(interfaceName: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Sets the `implementer` contract as ``account``'s implementer for `interfaceHash`. `account` being the zero address is an alias for the caller's address. The zero address can also be used in `implementer` to remove an old one. See {interfaceHash} to learn how these are created. Emits an {InterfaceImplementerSet} event. Requirements: - the caller must be the current manager for `account`. - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not end in 28 zeroes). - `implementer` must implement {IERC1820Implementer} and return true when queried for support, unless `implementer` is the caller. See {IERC1820Implementer-canImplementInterfaceForAddress}.
     */
    setInterfaceImplementer(
      account: string,
      interfaceHash: BytesLike,
      implementer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Sets the `implementer` contract as ``account``'s implementer for `interfaceHash`. `account` being the zero address is an alias for the caller's address. The zero address can also be used in `implementer` to remove an old one. See {interfaceHash} to learn how these are created. Emits an {InterfaceImplementerSet} event. Requirements: - the caller must be the current manager for `account`. - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not end in 28 zeroes). - `implementer` must implement {IERC1820Implementer} and return true when queried for support, unless `implementer` is the caller. See {IERC1820Implementer-canImplementInterfaceForAddress}.
     */
    'setInterfaceImplementer(address,bytes32,address)'(
      account: string,
      interfaceHash: BytesLike,
      implementer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Sets `newManager` as the manager for `account`. A manager of an account is able to set interface implementers for it. By default, each account is its own manager. Passing a value of `0x0` in `newManager` will reset the manager to this initial state. Emits a {ManagerChanged} event. Requirements: - the caller must be the current manager for `account`.
     */
    setManager(account: string, newManager: string, overrides?: Overrides): Promise<BigNumber>;

    /**
     * Sets `newManager` as the manager for `account`. A manager of an account is able to set interface implementers for it. By default, each account is its own manager. Passing a value of `0x0` in `newManager` will reset the manager to this initial state. Emits a {ManagerChanged} event. Requirements: - the caller must be the current manager for `account`.
     */
    'setManager(address,address)'(
      account: string,
      newManager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Updates the cache with whether the contract implements an ERC165 interface or not.
     * @param account Address of the contract for which to update the cache.
     * @param interfaceId ERC165 interface for which to update the cache.
     */
    updateERC165Cache(
      account: string,
      interfaceId: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Updates the cache with whether the contract implements an ERC165 interface or not.
     * @param account Address of the contract for which to update the cache.
     * @param interfaceId ERC165 interface for which to update the cache.
     */
    'updateERC165Cache(address,bytes4)'(
      account: string,
      interfaceId: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Returns the implementer of `interfaceHash` for `account`. If no such implementer is registered, returns the zero address. If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28 zeroes), `account` will be queried for support of it. `account` being the zero address is an alias for the caller's address.
     */
    getInterfaceImplementer(
      account: string,
      interfaceHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the implementer of `interfaceHash` for `account`. If no such implementer is registered, returns the zero address. If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28 zeroes), `account` will be queried for support of it. `account` being the zero address is an alias for the caller's address.
     */
    'getInterfaceImplementer(address,bytes32)'(
      account: string,
      interfaceHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the manager for `account`. See {setManager}.
     */
    getManager(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the manager for `account`. See {setManager}.
     */
    'getManager(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Checks whether a contract implements an ERC165 interface or not.  If the result is not cached a direct lookup on the contract address is performed.  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling  {updateERC165Cache} with the contract address.
     * @param account Address of the contract to check.
     * @param interfaceId ERC165 interface to check.
     */
    implementsERC165Interface(
      account: string,
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Checks whether a contract implements an ERC165 interface or not.  If the result is not cached a direct lookup on the contract address is performed.  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling  {updateERC165Cache} with the contract address.
     * @param account Address of the contract to check.
     * @param interfaceId ERC165 interface to check.
     */
    'implementsERC165Interface(address,bytes4)'(
      account: string,
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.
     * @param account Address of the contract to check.
     * @param interfaceId ERC165 interface to check.
     */
    implementsERC165InterfaceNoCache(
      account: string,
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.
     * @param account Address of the contract to check.
     * @param interfaceId ERC165 interface to check.
     */
    'implementsERC165InterfaceNoCache(address,bytes4)'(
      account: string,
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the interface hash for an `interfaceName`, as defined in the corresponding https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].
     */
    interfaceHash(interfaceName: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the interface hash for an `interfaceName`, as defined in the corresponding https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].
     */
    'interfaceHash(string)'(
      interfaceName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Sets the `implementer` contract as ``account``'s implementer for `interfaceHash`. `account` being the zero address is an alias for the caller's address. The zero address can also be used in `implementer` to remove an old one. See {interfaceHash} to learn how these are created. Emits an {InterfaceImplementerSet} event. Requirements: - the caller must be the current manager for `account`. - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not end in 28 zeroes). - `implementer` must implement {IERC1820Implementer} and return true when queried for support, unless `implementer` is the caller. See {IERC1820Implementer-canImplementInterfaceForAddress}.
     */
    setInterfaceImplementer(
      account: string,
      interfaceHash: BytesLike,
      implementer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Sets the `implementer` contract as ``account``'s implementer for `interfaceHash`. `account` being the zero address is an alias for the caller's address. The zero address can also be used in `implementer` to remove an old one. See {interfaceHash} to learn how these are created. Emits an {InterfaceImplementerSet} event. Requirements: - the caller must be the current manager for `account`. - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not end in 28 zeroes). - `implementer` must implement {IERC1820Implementer} and return true when queried for support, unless `implementer` is the caller. See {IERC1820Implementer-canImplementInterfaceForAddress}.
     */
    'setInterfaceImplementer(address,bytes32,address)'(
      account: string,
      interfaceHash: BytesLike,
      implementer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Sets `newManager` as the manager for `account`. A manager of an account is able to set interface implementers for it. By default, each account is its own manager. Passing a value of `0x0` in `newManager` will reset the manager to this initial state. Emits a {ManagerChanged} event. Requirements: - the caller must be the current manager for `account`.
     */
    setManager(
      account: string,
      newManager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Sets `newManager` as the manager for `account`. A manager of an account is able to set interface implementers for it. By default, each account is its own manager. Passing a value of `0x0` in `newManager` will reset the manager to this initial state. Emits a {ManagerChanged} event. Requirements: - the caller must be the current manager for `account`.
     */
    'setManager(address,address)'(
      account: string,
      newManager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Updates the cache with whether the contract implements an ERC165 interface or not.
     * @param account Address of the contract for which to update the cache.
     * @param interfaceId ERC165 interface for which to update the cache.
     */
    updateERC165Cache(
      account: string,
      interfaceId: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Updates the cache with whether the contract implements an ERC165 interface or not.
     * @param account Address of the contract for which to update the cache.
     * @param interfaceId ERC165 interface for which to update the cache.
     */
    'updateERC165Cache(address,bytes4)'(
      account: string,
      interfaceId: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
