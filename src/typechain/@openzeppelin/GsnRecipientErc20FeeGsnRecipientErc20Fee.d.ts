/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface GsnRecipientErc20FeeGsnRecipientErc20FeeInterface
  extends ethers.utils.Interface {
  functions: {
    "acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)": FunctionFragment;
    "getHubAddr()": FunctionFragment;
    "postRelayedCall(bytes,bool,uint256,bytes32)": FunctionFragment;
    "preRelayedCall(bytes)": FunctionFragment;
    "relayHubVersion()": FunctionFragment;
    "token()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptRelayedCall",
    values: [
      string,
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getHubAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "postRelayedCall",
    values: [BytesLike, boolean, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "preRelayedCall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "relayHubVersion",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "acceptRelayedCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHubAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "postRelayedCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preRelayedCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayHubVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;

  events: {
    "RelayHubChanged(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RelayHubChanged"): EventFragment;
}

export class GsnRecipientErc20FeeGsnRecipientErc20Fee extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: GsnRecipientErc20FeeGsnRecipientErc20FeeInterface;

  functions: {
    /**
     * Ensures that only users with enough gas payment token balance can have transactions relayed through the GSN.
     */
    acceptRelayedCall(
      arg0: string,
      from: string,
      arg2: BytesLike,
      transactionFee: BigNumberish,
      gasPrice: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      arg7: BytesLike,
      maxPossibleCharge: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: string;
    }>;

    /**
     * Ensures that only users with enough gas payment token balance can have transactions relayed through the GSN.
     */
    "acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)"(
      arg0: string,
      from: string,
      arg2: BytesLike,
      transactionFee: BigNumberish,
      gasPrice: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      arg7: BytesLike,
      maxPossibleCharge: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: string;
    }>;

    /**
     * Returns the address of the {IRelayHub} contract for this recipient.
     */
    getHubAddr(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the address of the {IRelayHub} contract for this recipient.
     */
    "getHubAddr()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * See `IRelayRecipient.postRelayedCall`. This function should not be overridden directly, use `_postRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract.
     */
    postRelayedCall(
      context: BytesLike,
      success: boolean,
      actualCharge: BigNumberish,
      preRetVal: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * See `IRelayRecipient.postRelayedCall`. This function should not be overridden directly, use `_postRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract.
     */
    "postRelayedCall(bytes,bool,uint256,bytes32)"(
      context: BytesLike,
      success: boolean,
      actualCharge: BigNumberish,
      preRetVal: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * See `IRelayRecipient.preRelayedCall`. This function should not be overridden directly, use `_preRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract.
     */
    preRelayedCall(
      context: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * See `IRelayRecipient.preRelayedCall`. This function should not be overridden directly, use `_preRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract.
     */
    "preRelayedCall(bytes)"(
      context: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Returns the version string of the {IRelayHub} for which this recipient implementation was built. If {_upgradeRelayHub} is used, the new {IRelayHub} instance should be compatible with this version.
     */
    relayHubVersion(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the version string of the {IRelayHub} for which this recipient implementation was built. If {_upgradeRelayHub} is used, the new {IRelayHub} instance should be compatible with this version.
     */
    "relayHubVersion()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the gas payment token.
     */
    token(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the gas payment token.
     */
    "token()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  /**
   * Ensures that only users with enough gas payment token balance can have transactions relayed through the GSN.
   */
  acceptRelayedCall(
    arg0: string,
    from: string,
    arg2: BytesLike,
    transactionFee: BigNumberish,
    gasPrice: BigNumberish,
    arg5: BigNumberish,
    arg6: BigNumberish,
    arg7: BytesLike,
    maxPossibleCharge: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: string;
  }>;

  /**
   * Ensures that only users with enough gas payment token balance can have transactions relayed through the GSN.
   */
  "acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)"(
    arg0: string,
    from: string,
    arg2: BytesLike,
    transactionFee: BigNumberish,
    gasPrice: BigNumberish,
    arg5: BigNumberish,
    arg6: BigNumberish,
    arg7: BytesLike,
    maxPossibleCharge: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: string;
  }>;

  /**
   * Returns the address of the {IRelayHub} contract for this recipient.
   */
  getHubAddr(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the {IRelayHub} contract for this recipient.
   */
  "getHubAddr()"(overrides?: CallOverrides): Promise<string>;

  /**
   * See `IRelayRecipient.postRelayedCall`. This function should not be overridden directly, use `_postRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract.
   */
  postRelayedCall(
    context: BytesLike,
    success: boolean,
    actualCharge: BigNumberish,
    preRetVal: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * See `IRelayRecipient.postRelayedCall`. This function should not be overridden directly, use `_postRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract.
   */
  "postRelayedCall(bytes,bool,uint256,bytes32)"(
    context: BytesLike,
    success: boolean,
    actualCharge: BigNumberish,
    preRetVal: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * See `IRelayRecipient.preRelayedCall`. This function should not be overridden directly, use `_preRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract.
   */
  preRelayedCall(
    context: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * See `IRelayRecipient.preRelayedCall`. This function should not be overridden directly, use `_preRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract.
   */
  "preRelayedCall(bytes)"(
    context: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Returns the version string of the {IRelayHub} for which this recipient implementation was built. If {_upgradeRelayHub} is used, the new {IRelayHub} instance should be compatible with this version.
   */
  relayHubVersion(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the version string of the {IRelayHub} for which this recipient implementation was built. If {_upgradeRelayHub} is used, the new {IRelayHub} instance should be compatible with this version.
   */
  "relayHubVersion()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the gas payment token.
   */
  token(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the gas payment token.
   */
  "token()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    /**
     * Ensures that only users with enough gas payment token balance can have transactions relayed through the GSN.
     */
    acceptRelayedCall(
      arg0: string,
      from: string,
      arg2: BytesLike,
      transactionFee: BigNumberish,
      gasPrice: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      arg7: BytesLike,
      maxPossibleCharge: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: string;
    }>;

    /**
     * Ensures that only users with enough gas payment token balance can have transactions relayed through the GSN.
     */
    "acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)"(
      arg0: string,
      from: string,
      arg2: BytesLike,
      transactionFee: BigNumberish,
      gasPrice: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      arg7: BytesLike,
      maxPossibleCharge: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: string;
    }>;

    /**
     * Returns the address of the {IRelayHub} contract for this recipient.
     */
    getHubAddr(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the {IRelayHub} contract for this recipient.
     */
    "getHubAddr()"(overrides?: CallOverrides): Promise<string>;

    /**
     * See `IRelayRecipient.postRelayedCall`. This function should not be overridden directly, use `_postRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract.
     */
    postRelayedCall(
      context: BytesLike,
      success: boolean,
      actualCharge: BigNumberish,
      preRetVal: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * See `IRelayRecipient.postRelayedCall`. This function should not be overridden directly, use `_postRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract.
     */
    "postRelayedCall(bytes,bool,uint256,bytes32)"(
      context: BytesLike,
      success: boolean,
      actualCharge: BigNumberish,
      preRetVal: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * See `IRelayRecipient.preRelayedCall`. This function should not be overridden directly, use `_preRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract.
     */
    preRelayedCall(
      context: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * See `IRelayRecipient.preRelayedCall`. This function should not be overridden directly, use `_preRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract.
     */
    "preRelayedCall(bytes)"(
      context: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Returns the version string of the {IRelayHub} for which this recipient implementation was built. If {_upgradeRelayHub} is used, the new {IRelayHub} instance should be compatible with this version.
     */
    relayHubVersion(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the version string of the {IRelayHub} for which this recipient implementation was built. If {_upgradeRelayHub} is used, the new {IRelayHub} instance should be compatible with this version.
     */
    "relayHubVersion()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the gas payment token.
     */
    token(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the gas payment token.
     */
    "token()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    RelayHubChanged(
      oldRelayHub: string | null,
      newRelayHub: string | null
    ): EventFilter;
  };

  estimateGas: {
    /**
     * Ensures that only users with enough gas payment token balance can have transactions relayed through the GSN.
     */
    acceptRelayedCall(
      arg0: string,
      from: string,
      arg2: BytesLike,
      transactionFee: BigNumberish,
      gasPrice: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      arg7: BytesLike,
      maxPossibleCharge: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Ensures that only users with enough gas payment token balance can have transactions relayed through the GSN.
     */
    "acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)"(
      arg0: string,
      from: string,
      arg2: BytesLike,
      transactionFee: BigNumberish,
      gasPrice: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      arg7: BytesLike,
      maxPossibleCharge: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the address of the {IRelayHub} contract for this recipient.
     */
    getHubAddr(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the {IRelayHub} contract for this recipient.
     */
    "getHubAddr()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See `IRelayRecipient.postRelayedCall`. This function should not be overridden directly, use `_postRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract.
     */
    postRelayedCall(
      context: BytesLike,
      success: boolean,
      actualCharge: BigNumberish,
      preRetVal: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * See `IRelayRecipient.postRelayedCall`. This function should not be overridden directly, use `_postRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract.
     */
    "postRelayedCall(bytes,bool,uint256,bytes32)"(
      context: BytesLike,
      success: boolean,
      actualCharge: BigNumberish,
      preRetVal: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * See `IRelayRecipient.preRelayedCall`. This function should not be overridden directly, use `_preRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract.
     */
    preRelayedCall(
      context: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * See `IRelayRecipient.preRelayedCall`. This function should not be overridden directly, use `_preRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract.
     */
    "preRelayedCall(bytes)"(
      context: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Returns the version string of the {IRelayHub} for which this recipient implementation was built. If {_upgradeRelayHub} is used, the new {IRelayHub} instance should be compatible with this version.
     */
    relayHubVersion(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the version string of the {IRelayHub} for which this recipient implementation was built. If {_upgradeRelayHub} is used, the new {IRelayHub} instance should be compatible with this version.
     */
    "relayHubVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the gas payment token.
     */
    token(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the gas payment token.
     */
    "token()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Ensures that only users with enough gas payment token balance can have transactions relayed through the GSN.
     */
    acceptRelayedCall(
      arg0: string,
      from: string,
      arg2: BytesLike,
      transactionFee: BigNumberish,
      gasPrice: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      arg7: BytesLike,
      maxPossibleCharge: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Ensures that only users with enough gas payment token balance can have transactions relayed through the GSN.
     */
    "acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)"(
      arg0: string,
      from: string,
      arg2: BytesLike,
      transactionFee: BigNumberish,
      gasPrice: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      arg7: BytesLike,
      maxPossibleCharge: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the {IRelayHub} contract for this recipient.
     */
    getHubAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the {IRelayHub} contract for this recipient.
     */
    "getHubAddr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * See `IRelayRecipient.postRelayedCall`. This function should not be overridden directly, use `_postRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract.
     */
    postRelayedCall(
      context: BytesLike,
      success: boolean,
      actualCharge: BigNumberish,
      preRetVal: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * See `IRelayRecipient.postRelayedCall`. This function should not be overridden directly, use `_postRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract.
     */
    "postRelayedCall(bytes,bool,uint256,bytes32)"(
      context: BytesLike,
      success: boolean,
      actualCharge: BigNumberish,
      preRetVal: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * See `IRelayRecipient.preRelayedCall`. This function should not be overridden directly, use `_preRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract.
     */
    preRelayedCall(
      context: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * See `IRelayRecipient.preRelayedCall`. This function should not be overridden directly, use `_preRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract.
     */
    "preRelayedCall(bytes)"(
      context: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the version string of the {IRelayHub} for which this recipient implementation was built. If {_upgradeRelayHub} is used, the new {IRelayHub} instance should be compatible with this version.
     */
    relayHubVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the version string of the {IRelayHub} for which this recipient implementation was built. If {_upgradeRelayHub} is used, the new {IRelayHub} instance should be compatible with this version.
     */
    "relayHubVersion()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the gas payment token.
     */
    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the gas payment token.
     */
    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
