/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface Erc777Interface extends ethers.utils.Interface {
  functions: {
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "authorizeOperator(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(uint256,bytes)": FunctionFragment;
    "decimals()": FunctionFragment;
    "defaultOperators()": FunctionFragment;
    "granularity()": FunctionFragment;
    "isOperatorFor(address,address)": FunctionFragment;
    "name()": FunctionFragment;
    "operatorBurn(address,uint256,bytes,bytes)": FunctionFragment;
    "operatorSend(address,address,uint256,bytes,bytes)": FunctionFragment;
    "revokeOperator(address)": FunctionFragment;
    "send(address,uint256,bytes)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeOperator",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "defaultOperators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "granularity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isOperatorFor",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "operatorBurn",
    values: [string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorSend",
    values: [string, string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "granularity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOperatorFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "operatorBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "AuthorizedOperator(address,address)": EventFragment;
    "Burned(address,address,uint256,bytes,bytes)": EventFragment;
    "Minted(address,address,uint256,bytes,bytes)": EventFragment;
    "RevokedOperator(address,address)": EventFragment;
    "Sent(address,address,address,uint256,bytes,bytes)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuthorizedOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Burned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Minted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokedOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class Erc777 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: Erc777Interface;

  functions: {
    /**
     * See {IERC20-allowance}. Note that operator and allowance concepts are orthogonal: operators may not have allowance, and accounts with allowance may not be operators themselves.
     */
    allowance(
      holder: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * See {IERC20-allowance}. Note that operator and allowance concepts are orthogonal: operators may not have allowance, and accounts with allowance may not be operators themselves.
     */
    "allowance(address,address)"(
      holder: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * See {IERC20-approve}. Note that accounts cannot have allowance issued by their operators.
     */
    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * See {IERC20-approve}. Note that accounts cannot have allowance issued by their operators.
     */
    "approve(address,uint256)"(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * See {IERC777-authorizeOperator}.
     */
    authorizeOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * See {IERC777-authorizeOperator}.
     */
    "authorizeOperator(address)"(
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Returns the amount of tokens owned by an account (`tokenHolder`).
     */
    balanceOf(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Returns the amount of tokens owned by an account (`tokenHolder`).
     */
    "balanceOf(address)"(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * See {IERC777-burn}. Also emits a {IERC20-Transfer} event for ERC20 compatibility.
     */
    burn(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * See {IERC777-burn}. Also emits a {IERC20-Transfer} event for ERC20 compatibility.
     */
    "burn(uint256,bytes)"(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * See {ERC20-decimals}. Always returns 18, as per the [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).
     */
    decimals(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    /**
     * See {ERC20-decimals}. Always returns 18, as per the [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).
     */
    "decimals()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    /**
     * See {IERC777-defaultOperators}.
     */
    defaultOperators(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    /**
     * See {IERC777-defaultOperators}.
     */
    "defaultOperators()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    /**
     * See {IERC777-granularity}. This implementation always returns `1`.
     */
    granularity(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * See {IERC777-granularity}. This implementation always returns `1`.
     */
    "granularity()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * See {IERC777-isOperatorFor}.
     */
    isOperatorFor(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    /**
     * See {IERC777-isOperatorFor}.
     */
    "isOperatorFor(address,address)"(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    /**
     * See {IERC777-name}.
     */
    name(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * See {IERC777-name}.
     */
    "name()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * See {IERC777-operatorBurn}. Emits {Burned} and {IERC20-Transfer} events.
     */
    operatorBurn(
      account: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * See {IERC777-operatorBurn}. Emits {Burned} and {IERC20-Transfer} events.
     */
    "operatorBurn(address,uint256,bytes,bytes)"(
      account: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * See {IERC777-operatorSend}. Emits {Sent} and {IERC20-Transfer} events.
     */
    operatorSend(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * See {IERC777-operatorSend}. Emits {Sent} and {IERC20-Transfer} events.
     */
    "operatorSend(address,address,uint256,bytes,bytes)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * See {IERC777-revokeOperator}.
     */
    revokeOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * See {IERC777-revokeOperator}.
     */
    "revokeOperator(address)"(
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * See {IERC777-send}. Also emits a {IERC20-Transfer} event for ERC20 compatibility.
     */
    send(
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * See {IERC777-send}. Also emits a {IERC20-Transfer} event for ERC20 compatibility.
     */
    "send(address,uint256,bytes)"(
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * See {IERC777-symbol}.
     */
    symbol(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * See {IERC777-symbol}.
     */
    "symbol()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * See {IERC777-totalSupply}.
     */
    totalSupply(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * See {IERC777-totalSupply}.
     */
    "totalSupply()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * See {IERC20-transfer}. Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient} interface if it is a contract. Also emits a {Sent} event.
     */
    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * See {IERC20-transfer}. Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient} interface if it is a contract. Also emits a {Sent} event.
     */
    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * See {IERC20-transferFrom}. Note that operator and allowance concepts are orthogonal: operators cannot call `transferFrom` (unless they have allowance), and accounts with allowance cannot call `operatorSend` (unless they are operators). Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events.
     */
    transferFrom(
      holder: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * See {IERC20-transferFrom}. Note that operator and allowance concepts are orthogonal: operators cannot call `transferFrom` (unless they have allowance), and accounts with allowance cannot call `operatorSend` (unless they are operators). Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events.
     */
    "transferFrom(address,address,uint256)"(
      holder: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  /**
   * See {IERC20-allowance}. Note that operator and allowance concepts are orthogonal: operators may not have allowance, and accounts with allowance may not be operators themselves.
   */
  allowance(
    holder: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * See {IERC20-allowance}. Note that operator and allowance concepts are orthogonal: operators may not have allowance, and accounts with allowance may not be operators themselves.
   */
  "allowance(address,address)"(
    holder: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * See {IERC20-approve}. Note that accounts cannot have allowance issued by their operators.
   */
  approve(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * See {IERC20-approve}. Note that accounts cannot have allowance issued by their operators.
   */
  "approve(address,uint256)"(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * See {IERC777-authorizeOperator}.
   */
  authorizeOperator(
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * See {IERC777-authorizeOperator}.
   */
  "authorizeOperator(address)"(
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Returns the amount of tokens owned by an account (`tokenHolder`).
   */
  balanceOf(tokenHolder: string, overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Returns the amount of tokens owned by an account (`tokenHolder`).
   */
  "balanceOf(address)"(
    tokenHolder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * See {IERC777-burn}. Also emits a {IERC20-Transfer} event for ERC20 compatibility.
   */
  burn(
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * See {IERC777-burn}. Also emits a {IERC20-Transfer} event for ERC20 compatibility.
   */
  "burn(uint256,bytes)"(
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * See {ERC20-decimals}. Always returns 18, as per the [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).
   */
  decimals(overrides?: CallOverrides): Promise<number>;

  /**
   * See {ERC20-decimals}. Always returns 18, as per the [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).
   */
  "decimals()"(overrides?: CallOverrides): Promise<number>;

  /**
   * See {IERC777-defaultOperators}.
   */
  defaultOperators(overrides?: CallOverrides): Promise<string[]>;

  /**
   * See {IERC777-defaultOperators}.
   */
  "defaultOperators()"(overrides?: CallOverrides): Promise<string[]>;

  /**
   * See {IERC777-granularity}. This implementation always returns `1`.
   */
  granularity(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * See {IERC777-granularity}. This implementation always returns `1`.
   */
  "granularity()"(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * See {IERC777-isOperatorFor}.
   */
  isOperatorFor(
    operator: string,
    tokenHolder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * See {IERC777-isOperatorFor}.
   */
  "isOperatorFor(address,address)"(
    operator: string,
    tokenHolder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * See {IERC777-name}.
   */
  name(overrides?: CallOverrides): Promise<string>;

  /**
   * See {IERC777-name}.
   */
  "name()"(overrides?: CallOverrides): Promise<string>;

  /**
   * See {IERC777-operatorBurn}. Emits {Burned} and {IERC20-Transfer} events.
   */
  operatorBurn(
    account: string,
    amount: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * See {IERC777-operatorBurn}. Emits {Burned} and {IERC20-Transfer} events.
   */
  "operatorBurn(address,uint256,bytes,bytes)"(
    account: string,
    amount: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * See {IERC777-operatorSend}. Emits {Sent} and {IERC20-Transfer} events.
   */
  operatorSend(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * See {IERC777-operatorSend}. Emits {Sent} and {IERC20-Transfer} events.
   */
  "operatorSend(address,address,uint256,bytes,bytes)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * See {IERC777-revokeOperator}.
   */
  revokeOperator(
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * See {IERC777-revokeOperator}.
   */
  "revokeOperator(address)"(
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * See {IERC777-send}. Also emits a {IERC20-Transfer} event for ERC20 compatibility.
   */
  send(
    recipient: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * See {IERC777-send}. Also emits a {IERC20-Transfer} event for ERC20 compatibility.
   */
  "send(address,uint256,bytes)"(
    recipient: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * See {IERC777-symbol}.
   */
  symbol(overrides?: CallOverrides): Promise<string>;

  /**
   * See {IERC777-symbol}.
   */
  "symbol()"(overrides?: CallOverrides): Promise<string>;

  /**
   * See {IERC777-totalSupply}.
   */
  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * See {IERC777-totalSupply}.
   */
  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * See {IERC20-transfer}. Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient} interface if it is a contract. Also emits a {Sent} event.
   */
  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * See {IERC20-transfer}. Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient} interface if it is a contract. Also emits a {Sent} event.
   */
  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * See {IERC20-transferFrom}. Note that operator and allowance concepts are orthogonal: operators cannot call `transferFrom` (unless they have allowance), and accounts with allowance cannot call `operatorSend` (unless they are operators). Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events.
   */
  transferFrom(
    holder: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * See {IERC20-transferFrom}. Note that operator and allowance concepts are orthogonal: operators cannot call `transferFrom` (unless they have allowance), and accounts with allowance cannot call `operatorSend` (unless they are operators). Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events.
   */
  "transferFrom(address,address,uint256)"(
    holder: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * See {IERC20-allowance}. Note that operator and allowance concepts are orthogonal: operators may not have allowance, and accounts with allowance may not be operators themselves.
     */
    allowance(
      holder: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * See {IERC20-allowance}. Note that operator and allowance concepts are orthogonal: operators may not have allowance, and accounts with allowance may not be operators themselves.
     */
    "allowance(address,address)"(
      holder: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * See {IERC20-approve}. Note that accounts cannot have allowance issued by their operators.
     */
    approve(
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * See {IERC20-approve}. Note that accounts cannot have allowance issued by their operators.
     */
    "approve(address,uint256)"(
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * See {IERC777-authorizeOperator}.
     */
    authorizeOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * See {IERC777-authorizeOperator}.
     */
    "authorizeOperator(address)"(
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns the amount of tokens owned by an account (`tokenHolder`).
     */
    balanceOf(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the amount of tokens owned by an account (`tokenHolder`).
     */
    "balanceOf(address)"(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * See {IERC777-burn}. Also emits a {IERC20-Transfer} event for ERC20 compatibility.
     */
    burn(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * See {IERC777-burn}. Also emits a {IERC20-Transfer} event for ERC20 compatibility.
     */
    "burn(uint256,bytes)"(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * See {ERC20-decimals}. Always returns 18, as per the [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).
     */
    decimals(overrides?: CallOverrides): Promise<number>;

    /**
     * See {ERC20-decimals}. Always returns 18, as per the [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).
     */
    "decimals()"(overrides?: CallOverrides): Promise<number>;

    /**
     * See {IERC777-defaultOperators}.
     */
    defaultOperators(overrides?: CallOverrides): Promise<string[]>;

    /**
     * See {IERC777-defaultOperators}.
     */
    "defaultOperators()"(overrides?: CallOverrides): Promise<string[]>;

    /**
     * See {IERC777-granularity}. This implementation always returns `1`.
     */
    granularity(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See {IERC777-granularity}. This implementation always returns `1`.
     */
    "granularity()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See {IERC777-isOperatorFor}.
     */
    isOperatorFor(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * See {IERC777-isOperatorFor}.
     */
    "isOperatorFor(address,address)"(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * See {IERC777-name}.
     */
    name(overrides?: CallOverrides): Promise<string>;

    /**
     * See {IERC777-name}.
     */
    "name()"(overrides?: CallOverrides): Promise<string>;

    /**
     * See {IERC777-operatorBurn}. Emits {Burned} and {IERC20-Transfer} events.
     */
    operatorBurn(
      account: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * See {IERC777-operatorBurn}. Emits {Burned} and {IERC20-Transfer} events.
     */
    "operatorBurn(address,uint256,bytes,bytes)"(
      account: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * See {IERC777-operatorSend}. Emits {Sent} and {IERC20-Transfer} events.
     */
    operatorSend(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * See {IERC777-operatorSend}. Emits {Sent} and {IERC20-Transfer} events.
     */
    "operatorSend(address,address,uint256,bytes,bytes)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * See {IERC777-revokeOperator}.
     */
    revokeOperator(operator: string, overrides?: CallOverrides): Promise<void>;

    /**
     * See {IERC777-revokeOperator}.
     */
    "revokeOperator(address)"(
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * See {IERC777-send}. Also emits a {IERC20-Transfer} event for ERC20 compatibility.
     */
    send(
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * See {IERC777-send}. Also emits a {IERC20-Transfer} event for ERC20 compatibility.
     */
    "send(address,uint256,bytes)"(
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * See {IERC777-symbol}.
     */
    symbol(overrides?: CallOverrides): Promise<string>;

    /**
     * See {IERC777-symbol}.
     */
    "symbol()"(overrides?: CallOverrides): Promise<string>;

    /**
     * See {IERC777-totalSupply}.
     */
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See {IERC777-totalSupply}.
     */
    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See {IERC20-transfer}. Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient} interface if it is a contract. Also emits a {Sent} event.
     */
    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * See {IERC20-transfer}. Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient} interface if it is a contract. Also emits a {Sent} event.
     */
    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * See {IERC20-transferFrom}. Note that operator and allowance concepts are orthogonal: operators cannot call `transferFrom` (unless they have allowance), and accounts with allowance cannot call `operatorSend` (unless they are operators). Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events.
     */
    transferFrom(
      holder: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * See {IERC20-transferFrom}. Note that operator and allowance concepts are orthogonal: operators cannot call `transferFrom` (unless they have allowance), and accounts with allowance cannot call `operatorSend` (unless they are operators). Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events.
     */
    "transferFrom(address,address,uint256)"(
      holder: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    AuthorizedOperator(
      operator: string | null,
      tokenHolder: string | null
    ): EventFilter;

    Burned(
      operator: string | null,
      from: string | null,
      amount: null,
      data: null,
      operatorData: null
    ): EventFilter;

    Minted(
      operator: string | null,
      to: string | null,
      amount: null,
      data: null,
      operatorData: null
    ): EventFilter;

    RevokedOperator(
      operator: string | null,
      tokenHolder: string | null
    ): EventFilter;

    Sent(
      operator: string | null,
      from: string | null,
      to: string | null,
      amount: null,
      data: null,
      operatorData: null
    ): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;
  };

  estimateGas: {
    /**
     * See {IERC20-allowance}. Note that operator and allowance concepts are orthogonal: operators may not have allowance, and accounts with allowance may not be operators themselves.
     */
    allowance(
      holder: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * See {IERC20-allowance}. Note that operator and allowance concepts are orthogonal: operators may not have allowance, and accounts with allowance may not be operators themselves.
     */
    "allowance(address,address)"(
      holder: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * See {IERC20-approve}. Note that accounts cannot have allowance issued by their operators.
     */
    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * See {IERC20-approve}. Note that accounts cannot have allowance issued by their operators.
     */
    "approve(address,uint256)"(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * See {IERC777-authorizeOperator}.
     */
    authorizeOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * See {IERC777-authorizeOperator}.
     */
    "authorizeOperator(address)"(
      operator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Returns the amount of tokens owned by an account (`tokenHolder`).
     */
    balanceOf(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the amount of tokens owned by an account (`tokenHolder`).
     */
    "balanceOf(address)"(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * See {IERC777-burn}. Also emits a {IERC20-Transfer} event for ERC20 compatibility.
     */
    burn(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * See {IERC777-burn}. Also emits a {IERC20-Transfer} event for ERC20 compatibility.
     */
    "burn(uint256,bytes)"(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * See {ERC20-decimals}. Always returns 18, as per the [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).
     */
    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See {ERC20-decimals}. Always returns 18, as per the [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).
     */
    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See {IERC777-defaultOperators}.
     */
    defaultOperators(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See {IERC777-defaultOperators}.
     */
    "defaultOperators()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See {IERC777-granularity}. This implementation always returns `1`.
     */
    granularity(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See {IERC777-granularity}. This implementation always returns `1`.
     */
    "granularity()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See {IERC777-isOperatorFor}.
     */
    isOperatorFor(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * See {IERC777-isOperatorFor}.
     */
    "isOperatorFor(address,address)"(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * See {IERC777-name}.
     */
    name(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See {IERC777-name}.
     */
    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See {IERC777-operatorBurn}. Emits {Burned} and {IERC20-Transfer} events.
     */
    operatorBurn(
      account: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * See {IERC777-operatorBurn}. Emits {Burned} and {IERC20-Transfer} events.
     */
    "operatorBurn(address,uint256,bytes,bytes)"(
      account: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * See {IERC777-operatorSend}. Emits {Sent} and {IERC20-Transfer} events.
     */
    operatorSend(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * See {IERC777-operatorSend}. Emits {Sent} and {IERC20-Transfer} events.
     */
    "operatorSend(address,address,uint256,bytes,bytes)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * See {IERC777-revokeOperator}.
     */
    revokeOperator(operator: string, overrides?: Overrides): Promise<BigNumber>;

    /**
     * See {IERC777-revokeOperator}.
     */
    "revokeOperator(address)"(
      operator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * See {IERC777-send}. Also emits a {IERC20-Transfer} event for ERC20 compatibility.
     */
    send(
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * See {IERC777-send}. Also emits a {IERC20-Transfer} event for ERC20 compatibility.
     */
    "send(address,uint256,bytes)"(
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * See {IERC777-symbol}.
     */
    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See {IERC777-symbol}.
     */
    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See {IERC777-totalSupply}.
     */
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See {IERC777-totalSupply}.
     */
    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See {IERC20-transfer}. Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient} interface if it is a contract. Also emits a {Sent} event.
     */
    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * See {IERC20-transfer}. Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient} interface if it is a contract. Also emits a {Sent} event.
     */
    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * See {IERC20-transferFrom}. Note that operator and allowance concepts are orthogonal: operators cannot call `transferFrom` (unless they have allowance), and accounts with allowance cannot call `operatorSend` (unless they are operators). Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events.
     */
    transferFrom(
      holder: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * See {IERC20-transferFrom}. Note that operator and allowance concepts are orthogonal: operators cannot call `transferFrom` (unless they have allowance), and accounts with allowance cannot call `operatorSend` (unless they are operators). Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events.
     */
    "transferFrom(address,address,uint256)"(
      holder: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * See {IERC20-allowance}. Note that operator and allowance concepts are orthogonal: operators may not have allowance, and accounts with allowance may not be operators themselves.
     */
    allowance(
      holder: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC20-allowance}. Note that operator and allowance concepts are orthogonal: operators may not have allowance, and accounts with allowance may not be operators themselves.
     */
    "allowance(address,address)"(
      holder: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC20-approve}. Note that accounts cannot have allowance issued by their operators.
     */
    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC20-approve}. Note that accounts cannot have allowance issued by their operators.
     */
    "approve(address,uint256)"(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC777-authorizeOperator}.
     */
    authorizeOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC777-authorizeOperator}.
     */
    "authorizeOperator(address)"(
      operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the amount of tokens owned by an account (`tokenHolder`).
     */
    balanceOf(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the amount of tokens owned by an account (`tokenHolder`).
     */
    "balanceOf(address)"(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC777-burn}. Also emits a {IERC20-Transfer} event for ERC20 compatibility.
     */
    burn(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC777-burn}. Also emits a {IERC20-Transfer} event for ERC20 compatibility.
     */
    "burn(uint256,bytes)"(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {ERC20-decimals}. Always returns 18, as per the [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).
     */
    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * See {ERC20-decimals}. Always returns 18, as per the [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).
     */
    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * See {IERC777-defaultOperators}.
     */
    defaultOperators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * See {IERC777-defaultOperators}.
     */
    "defaultOperators()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC777-granularity}. This implementation always returns `1`.
     */
    granularity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * See {IERC777-granularity}. This implementation always returns `1`.
     */
    "granularity()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * See {IERC777-isOperatorFor}.
     */
    isOperatorFor(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC777-isOperatorFor}.
     */
    "isOperatorFor(address,address)"(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC777-name}.
     */
    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * See {IERC777-name}.
     */
    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * See {IERC777-operatorBurn}. Emits {Burned} and {IERC20-Transfer} events.
     */
    operatorBurn(
      account: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC777-operatorBurn}. Emits {Burned} and {IERC20-Transfer} events.
     */
    "operatorBurn(address,uint256,bytes,bytes)"(
      account: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC777-operatorSend}. Emits {Sent} and {IERC20-Transfer} events.
     */
    operatorSend(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC777-operatorSend}. Emits {Sent} and {IERC20-Transfer} events.
     */
    "operatorSend(address,address,uint256,bytes,bytes)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC777-revokeOperator}.
     */
    revokeOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC777-revokeOperator}.
     */
    "revokeOperator(address)"(
      operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC777-send}. Also emits a {IERC20-Transfer} event for ERC20 compatibility.
     */
    send(
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC777-send}. Also emits a {IERC20-Transfer} event for ERC20 compatibility.
     */
    "send(address,uint256,bytes)"(
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC777-symbol}.
     */
    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * See {IERC777-symbol}.
     */
    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * See {IERC777-totalSupply}.
     */
    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * See {IERC777-totalSupply}.
     */
    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * See {IERC20-transfer}. Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient} interface if it is a contract. Also emits a {Sent} event.
     */
    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC20-transfer}. Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient} interface if it is a contract. Also emits a {Sent} event.
     */
    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC20-transferFrom}. Note that operator and allowance concepts are orthogonal: operators cannot call `transferFrom` (unless they have allowance), and accounts with allowance cannot call `operatorSend` (unless they are operators). Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events.
     */
    transferFrom(
      holder: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC20-transferFrom}. Note that operator and allowance concepts are orthogonal: operators cannot call `transferFrom` (unless they have allowance), and accounts with allowance cannot call `operatorSend` (unless they are operators). Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events.
     */
    "transferFrom(address,address,uint256)"(
      holder: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
